version: 2.1

orbs:
  # Version 3.2.4 is the "new" uploader, but it's a 50 MB Node.js *binary* and
  # doesn't work on ARM64 Linux (or ARM Macs, or FreeBSD for that matter) and
  # nobody seems to care. Issues opened since Septembe 2021:
  #   https://github.com/codecov/uploader/issues/347
  #   https://github.com/codecov/uploader/issues/523
  #   https://github.com/codecov/uploader/issues/849
  # The old 1.1.1 still seems to work even though codecov got removed from pip
  # on 2023-04-14.
  codecov: codecov/codecov@1.1.1

executors:
  ubuntu-18_04:
    docker:
    - image: ubuntu:bionic-20220427
  # Used by the ThreadSanitizer build. Cannot be a Docker because we need to
  # disable ASLR which can only be done with a real VM.
  ubuntu-20_04:
    machine:
      image: ubuntu-2004:2024.11.1
  # Images below 14.0.1 (and all x86 variants) are removed as of Nov 7, 2025
  xcode-14_0:
    macos:
      xcode: 14.0.1
    resource_class: macos.m1.medium.gen1
  emscripten2:
    docker:
    # 2.0.16 is the oldest on Docker that isn't based on Debian Buster which
    # started 404ing as of 2025-07-13. However, as usual, it doesn't work:
    #  error: symbol '__indirect_function_table' is not a function table`
    # So bumping the min version right to 2.0.26 that was used previously as
    # the "higher" version, as explained below.
    #
    # Finalized support for WASM SIMD is since 2.0.18, and then the first
    # non-broken emsdk is 2.0.25. But emsdk ships with Node.js 14, and only
    # Node.js 15+ supports intrinsics that Emscripten 2.0.18 can produce, so we
    # have to install our own in order to actually test the SIMD code. Node.js
    # upgrade in emsdk itself is tracked in
    # https://github.com/emscripten-core/emsdk/issues/1064, as of October 2024
    # it's still open but emsdk 3.1.36+ contains Node 15, 3.1.42+ Node 16 and
    # 3.1.61+ Node 18.
    #
    # 2.0.25 has something fishy that causes Utility::allocateAligned()
    # to return pointers that aren't actually aligned. That's fixed with
    # 2.0.26, which is what is used here. 2.0.26+ then has a problem in the
    # file embedder, where zero-size files are reported as having 3 bytes. The
    # changelog between 2.0.25 and 2.0.26 doesn't mention anything related, the
    # only related change I found was this, going into 2.0.25 already, and I
    # suspect it's something related to padding in base64 decode. The affected
    # test cases have a corresponding XFAIL.
    #  https://github.com/emscripten-core/emscripten/pull/14526
    # This then happens in *all* versions until 3.1.3 *a year later*, where the
    # "fix" is that they ditched the (broken?) base64 embedding in favor of a
    # binary embed, linked below. Which OTOH breaks Unicode filename support,
    # and that is still the case even with 3.1.67, so there's a corresponding
    # XFAIL for all test cases involving empty files. YAY! TOOLCHAIN FROM HELL!
    #  https://github.com/emscripten-core/emscripten/pull/16050
    - image: emscripten/emsdk:2.0.26
  emscripten3:
    docker:
    # Then, the first working "3" version is used to test this era. The current
    # 4.x version is tested only locally.
    - image: emscripten/emsdk:3.0.0
  python-3_6:
    docker:
    - image: python:3.6.12
  android-29:
    machine:
      image: android:2021.10.1
  arm64:
    machine:
      image: ubuntu-2004:2023.07.1
    resource_class: arm.medium

commands:
  install-base-linux:
    parameters:
      extra:
        type: string
        default: ""
      sudo:
        type: string
        default: ""
    steps:
    - run:
        # TODO when switching to the new codecov uploader, gpg and git needs to
        #   be installed as well
        name: Update apt and install base packages
        command: |
          << parameters.sudo >> apt update
          if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then export LCOV_PACKAGES="lcov curl"; fi
          << parameters.sudo >> apt install -y ninja-build $LCOV_PACKAGES << parameters.extra >>

  # TODO this might get resolved with 1.11.1:
  #   https://github.com/ninja-build/ninja/pull/1827
  #   https://github.com/ninja-build/ninja/pull/2174
  # But wouldn't it build too slow then? Heh
  cap-ninja-jobs:
    parameters:
      count:
        type: integer
        # It reports 36 cores and ninja goes with 38 currently, RAM fluctuates
        # from 3 to 70 GB.
        default: 24
    steps:
    - run:
        name: Query CPU cores, default Ninja parallelism and available RAM, cap jobs
        command: |
          nproc
          ninja --help 2>&1 | grep "N jobs in parallel" || true
          free
          echo "export NINJA_JOBS=-j<< parameters.count >>" >> $BASH_ENV

  install-base-macos:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Install base packages
        # As usual, homebrew takes five minutes to update and then explodes in
        # a spectacular way. How is this acceptable?!
        command: |
          if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then export LCOV_PACKAGES="lcov"; fi
          HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake ninja $LCOV_PACKAGES << parameters.extra >>

  install-base-android:
    steps:
    - run:
        name: Create Android 29 x86 AVD
        command: |
          SYSTEM_IMAGES="system-images;android-29;default;x86"
          sdkmanager "$SYSTEM_IMAGES"
          echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
    - run:
        name: Launch Android emulator
        command: |
          emulator -avd test -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
        background: true
    - run:
        name: Update apt and install base packages
        # Compared to Docker images this needs sudo
        command: |
          sudo apt update
          sudo apt install -y ninja-build

  install-gcc-4_8:
    steps:
    - run:
        name: Install GCC 4.8
        # For some reason, CMake needs a working C compiler, so provice CC as
        # well for the case when default gcc isn't installed.
        command: |
          apt install -y g++-4.8
          echo 'export CC=gcc-4.8' >> $BASH_ENV
          echo 'export CXX=g++-4.8' >> $BASH_ENV

  # While we want to make sure the project builds on GCC 4.8 as certain
  # embedded toolchains still use it, for Clang we just pick the version
  # available in the oldest supported distro.
  install-clang:
    parameters:
      sudo:
        type: string
        default: ""
      symbolizer-link:
        type: boolean
        default: true
    steps:
    - run:
        # For some reason, CMake needs a working C compiler, so provide CC as
        # well for the case when default gcc isn't installed.
        name: Install Clang
        command: |
          << parameters.sudo >> apt install -y clang
          echo 'export CC=clang' >> $BASH_ENV
          echo 'export CXX=clang++' >> $BASH_ENV
    # With Clang 6 on 18.04, the llvm-symbolizer link needs to be set in order
    # to have usable symbols in the output. This affects suppressions as well,
    # meaning they won't work if the symbols are not resolvable. It's not
    # enough to just `export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-6.0`
    # because it then complains that
    #
    #   External symbolizer path is set to '/usr/bin/llvm-symbolizer-6.0' which
    #   isn't a known symbolizer. Please set the path to the llvm-symbolizer
    #   binary or other known tool.
    #
    # Probably because because it detects tool type based on the filename? Ugh.
    - when:
        condition: << parameters.symbolizer-link >>
        steps:
        - run:
            name: Create /usr/bin/llvm-symbolizer symlink
            command: |
              ls -l /usr/bin/llvm-symbolizer-6.0
              ln -s /usr/bin/llvm-symbolizer{-6.0,}

  install-cmake:
    parameters:
      version:
        type: string
      suffix:
        type: string
        default: Linux
      sudo:
        type: string
        default: ""
    steps:
    - run:
        name: Install CMake << parameters.version >>
        command: |
          version_short=<< parameters.version >>
          version_short="${version_short%.*}"
          << parameters.sudo >> apt install -y wget
          mkdir -p $HOME/cmake && cd $HOME/cmake
          wget -nc --no-check-certificate https://cmake.org/files/v$version_short/cmake-<< parameters.version >>-<< parameters.suffix >>-x86_64.tar.gz
          tar --strip-components=1 -xzf cmake-<< parameters.version >>-<< parameters.suffix >>-x86_64.tar.gz
          echo 'export PATH=$HOME/cmake/bin:$PATH' >> $BASH_ENV
          source $BASH_ENV
          cmake --version | grep << parameters.version >>
          ctest --version | grep << parameters.version >>

  install-nodejs:
    parameters:
      version:
        type: string
        default: "18"
    steps:
    - run:
        name: Install Node.js << parameters.version >>
        # cd'ing to the home directory as otherwise it'd download into
        # /root/project and a checkout would then fail because it's not empty.
        # Also emsdk forces the PATH to prefer its own nodejs, so explicitly
        # call /usr/bin/node.
        command: |
          cd ~
          curl -fsSL https://deb.nodesource.com/setup_<< parameters.version >>.x -o nodesource_setup.sh
          bash nodesource_setup.sh
          apt-get install -y nodejs
          /usr/bin/node -v

  make-expected-linux-dirs:
    steps:
    - run:
        name: Create files expected by Utility::Path tests on Linux
        command: |
          mkdir -p ~/.config/autostart
          mkdir -p ~/.local

  build:
    parameters:
      script:
        type: string
    steps:
    - checkout
    - run:
        name: Build & test
        command: |
          if [ "$BUILD_STATIC" != "ON" ]; then export BUILD_STATIC=OFF; fi
          if [ "$BUILD_DEPRECATED" != "OFF" ]; then export BUILD_DEPRECATED=ON; fi
          ./package/ci/<< parameters.script >>

  # Extracted outside as it's used by both the lcov step and the `acme` job
  upload-codecov:
    parameters:
      file:
        type: string
    steps:
    # Official docs say "token not needed for public repos", in reality not
    # using the token is "extremely flakey". What's best is that if the upload
    # fails, the damn thing exits with a success error code, and nobody cares:
    # https://github.com/codecov/codecov-circleci-orb/issues/139
    # https://community.codecov.com/t/commit-sha-does-not-match-circle-build/4266
    #
    # Second best thing is that the codecov/upload helper takes a `token`
    # parameter. But the token parameter is an ENVIRONMENT VARIABLE NAME!! So
    # one just *can't* pass the token there. It got changed arbitrarily in
    # https://github.com/codecov/codecov-circleci-orb/pull/93 "because
    # CircleCI docs suggested so", yet all codecov docs suggest just commiting
    # that token directly to the YML files because "it's fine". So if it's
    # fine, why do I have to suffer like this?!
    - run:
        name: Set codecov upload token because everything is a dumpster fire
        # An icing on the cake is that CircleCI commands don't allow setting
        # `environment` for `commands`, only for `jobs`, so I have to do that
        # via bash, and because the environment isn't passsed from a run to
        # run, use the BASH_ENV hack. Mmm. Technology.
        command: |
          echo 'export CODECOV_TOKEN=5f6a19a9-4a9b-4ee8-8a0b-c0cdfbbdcccd' >> "$BASH_ENV"
    - codecov/upload:
        file: << parameters.file >>

  lcov:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Collect code coverage
        # Keep in sync with PKBUILD-coverage and appveyor-desktop{,-mingw}.bat,
        # please
        #
        # TODO: On Mac, and likely on ARM64 with newer GCC, empty lines
        # containing just } or any amount of closing braces are reported as
        # uncovered, likely due to some incompatiblity / lcov bugs. Excluding
        # them could be done with `--omit-lines "^\\s*[})]+;?$"`, but such an
        # option is only since lcov 1.17, and the Mac build has only 1.16 right
        # now, ARM64 only 1.14. OTOH it's also possible that by just updating
        # lcov this problem goes away and the regex wouldn't be needed.
        #
        # Similar exclusion is done for the MinGW build which uses grcov.
        command: |
          lcov << parameters.extra >> --directory . --capture --output-file coverage.info > /dev/null
          lcov << parameters.extra >> --extract coverage.info "*/src/Corrade/*" --output-file coverage.info > /dev/null
          lcov << parameters.extra >> --remove coverage.info "*/Test/*" --output-file coverage.info > /dev/null
          lcov << parameters.extra >> --remove coverage.info "*/build/src/Corrade/*" --output-file coverage.info > /dev/null
    - upload-codecov:
        file: coverage.info

jobs:
  linux:
    executor: ubuntu-18_04
    environment:
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    # libidn11 needed by CMake. Install also Git so we verify that Git version
    # embedding works
    - install-base-linux:
        extra: libidn11 git
    # OOMs during compilation of Strided[Bit]ArrayViewTest
    # TODO revisit once deprecated includes are dropped (non-deprecated build
    # doesn't fail), https://github.com/mosra/corrade/pull/140 may also help?
    - cap-ninja-jobs
    - install-gcc-4_8
    - install-cmake:
        version: "3.5.2"
    - make-expected-linux-dirs
    - build:
        script: unix-desktop.sh
    - lcov:
        extra: --gcov-tool /usr/bin/gcov-4.8

  linux-arm64:
    executor: arm64
    environment:
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    # Not installing the old GCC 4.8 and CMake 3.5 to speed up. These are
    # tested more than enough on other jobs. Machine executors need sudo.
    - install-base-linux:
        extra: gcc cmake
        sudo: sudo
    - make-expected-linux-dirs
    - build:
        script: unix-desktop.sh
    - lcov

  linux-static:
    executor: ubuntu-18_04
    environment:
      # STUPID yml interprets unquoted ON as a boolean
      # https://stackoverflow.com/questions/53648244/specifying-the-string-value-yes-in-a-yaml-property
      BUILD_STATIC: "ON"
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    # libidn11 needed by CMake
    - install-base-linux:
        extra: libidn11
    # OOMs during compilation of Strided[Bit]ArrayViewTest
    # TODO revisit once deprecated includes are dropped (non-deprecated build
    # doesn't fail), https://github.com/mosra/corrade/pull/140 may also help?
    - cap-ninja-jobs
    - install-gcc-4_8
    - install-cmake:
        version: "3.5.2"
    - make-expected-linux-dirs
    - build:
        script: unix-desktop.sh
    - lcov:
        extra: --gcov-tool /usr/bin/gcov-4.8

  linux-nondeprecated:
    executor: ubuntu-18_04
    environment:
      # STUPID yml interprets unquoted OFF as a boolean
      BUILD_DEPRECATED: "OFF"
      CMAKE_CXX_FLAGS: -DCORRADE_NO_ASSERT
      CONFIGURATION: Release
    steps:
    # libidn11 needed by CMake
    - install-base-linux:
        extra: libidn11
    - cap-ninja-jobs
    - install-gcc-4_8
    - install-cmake:
        version: "3.5.2"
    - make-expected-linux-dirs
    - build:
        script: unix-desktop.sh

  linux-sanitizers:
    executor: ubuntu-18_04
    environment:
      CMAKE_CXX_FLAGS: -fsanitize=address
      CONFIGURATION: Debug
    steps:
    # libidn11 needed by CMake
    - install-base-linux:
        extra: libidn11
    - install-clang
    - install-cmake:
        version: "3.5.2"
    - make-expected-linux-dirs
    - build:
        script: unix-desktop.sh

  # https://github.com/google/sanitizers/issues/1716 ; started happening on
  # 2024-11-08 as CircleCI uses a base system with kernel 6.5 instead of 5.15
  # for Docker images:
  #   https://discuss.circleci.com/t/docker-executor-infrastructure-upgrade/52282
  # This manifests when running corrade-rc already:
  #   ThreadSanitizer: unexpected memory mapping 0x7e2f226ae000-0x7e2f22b00000
  # Unfortunately, with Docker images, none of the suggested
  #   sysctl vm.mmap_rnd_bits=28
  #   echo 0 | tee /proc/sys/kernel/randomize_va_space
  # works, complaining about read-only filesystem. The only way to set those is
  # with a real VM instead of Docker, which is what's done here. It also means
  # it's not possible to test on 18.04 anymore as those VMs are no longer
  # provided.
  linux-threadsanitizer:
    executor: ubuntu-20_04
    environment:
      CMAKE_CXX_FLAGS: -fsanitize=thread
      CONFIGURATION: Debug
    steps:
    - install-base-linux:
        extra: cmake
        sudo: sudo
    - install-clang:
        sudo: sudo
        symbolizer-link: false
    - make-expected-linux-dirs
    - run:
        # Right now (2025-01-17) it's already set to 28 so nothing needs to be
        # changed. This is for the future when it may break again, and yes,
        # setting it explicitly to 32 causes the above error again.
        name: Ensure ASLR is compatible with ThreadSanitizer
        command: |
          sudo sysctl vm.mmap_rnd_bits
          sudo sysctl vm.mmap_rnd_bits=28
    - build:
        script: unix-desktop.sh

  macos:
    executor: xcode-14_0
    environment:
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    - install-base-macos
    - build:
        script: unix-desktop.sh
    - lcov

  macos-static:
    executor: xcode-14_0
    environment:
      # STUPID yml interprets unquoted ON as a boolean
      BUILD_STATIC: "ON"
      CMAKE_CXX_FLAGS: --coverage
      CONFIGURATION: Debug
    steps:
    - install-base-macos
    - build:
        script: unix-desktop.sh
    - lcov

  emscripten1:
    executor: emscripten2
    # Deliberately *not* setting NODEJS_EXECUTABLE here to verify that the
    # build correctly skips WASM SIMD tests for Node.js 14. WASM SIMD is then
    # tested in the job below.
    steps:
    - install-base-linux
    # With a Debug build, 38 is causing OOMs. Release was fine with that.
    - cap-ninja-jobs
    - run:
        name: Query CMake version
        command: cmake --version
    - build:
        script: emscripten.sh

  emscripten2:
    executor: emscripten3
    environment:
      # Use Node.js 15 to be able to verify WASM SIMD codepaths. emsdk forces
      # the PATH to prefer its own nodejs, so explicitly force /usr/bin/node to
      # be used by CMake.
      EXTRA_OPTS: >
        -DNODEJS_EXECUTABLE=/usr/bin/node
    steps:
    - install-base-linux:
        extra: curl
    - cap-ninja-jobs
    - install-nodejs
    - run:
        name: Query CMake version
        command: cmake --version
    - build:
        script: emscripten.sh

  android-x86:
    executor: android-29
    steps:
    - install-base-android
    # CMake older than 3.20 doesn't work with NDK r22+ which removed some
    # deprecated paths. NDK r21 is only on deprecated CircleCI Android images
    # now.
    - install-cmake:
        version: "3.20.6"
        suffix: linux
        sudo: sudo
    - build:
        script: android-x86.sh

  ios:
    executor: xcode-14_0
    environment:
      # Yep, xcodebuild is beyond stupid and just DOESN'T build in parallel by
      # default. The default medium resource class has 4 CPUs and Ninja uses
      # -j6, so do the same for xcodebuild.
      XCODE_JOBS: 6
    steps:
    - install-base-macos:
        extra: xcbeautify
    - build:
        script: ios-simulator.sh

  # Python preprocessor for magnum-singles, for a lack of better name
  acme:
    executor: python-3_6
    steps:
    - run:
        name: Install coverage
        command: pip install coverage
    - checkout
    - run:
        name: Run tests and collect coverage
        working_directory: src/acme
        command: |
          coverage run -m unittest
          coverage xml
    - upload-codecov:
        file: src/acme/coverage.xml

workflows:
  version: 2
  build:
    # While there's no actual execution or data dependency between the jobs,
    # this is done in order to reduce unnecessary credit usage. The base and
    # non-deprecated Linux builds are taken as the main sanity checks. Only
    # if they pass, the rest of the jobs gets gradually executed, with further
    # dependencies especially for the macOS jobs that take the most credits.
    jobs:
    - linux
    - linux-nondeprecated
    - linux-arm64:
        requires:
        - linux
        - linux-nondeprecated
    - linux-static:
        requires:
        - linux
        - linux-nondeprecated
    - linux-sanitizers:
        requires:
        - linux
        - linux-nondeprecated
    - linux-threadsanitizer:
        requires:
        - linux-sanitizers
    - macos:
        requires:
        - linux-arm64
        - linux-nondeprecated
    - macos-static:
        requires:
        - linux-arm64
        - linux-static
    - emscripten1:
        requires:
        - linux-static
    - emscripten2:
        requires:
        - linux-static
    - android-x86:
        requires:
        - linux-static
        - linux-arm64
    - ios:
        requires:
        - macos-static
    - acme
