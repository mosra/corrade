/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
                2017, 2018, 2019, 2020, 2021, 2022
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade {

/** @page corrade-changelog Changelog

@tableofcontents

@section corrade-changelog-latest Changes since 2020.06

@subsection corrade-changelog-latest-new New features

-   MSVC 2022 support. For that there's a new @ref CORRADE_MSVC_COMPATIBILITY
    flag that controls workarounds for MSVC 2019+ with the `/permissive-` flag
    not enabled. This supersedes the `CORRADE_MSVC2019_COMPATIBILITY` flag and
    can  be turned off if `/permissive-` is set for all files that use Corrade.
    See also [mosra/corrade#124](https://github.com/mosra/corrade/issues/124).
-   New @ref CORRADE_TARGET_WASM preprocessor variable for any (even
    non-Emscripten) WebAssembly target, as a complement to
    @ref CORRADE_TARGET_X86, @ref CORRADE_TARGET_ARM and
    @ref CORRADE_TARGET_POWERPC
-   New @ref CORRADE_TARGET_SSE3, @ref CORRADE_TARGET_SSSE3,
    @ref CORRADE_TARGET_SSE41, @ref CORRADE_TARGET_SSE42,
    @ref CORRADE_TARGET_POPCNT, @ref CORRADE_TARGET_LZCNT,
    @ref CORRADE_TARGET_BMI1, @ref CORRADE_TARGET_AVX,
    @ref CORRADE_TARGET_AVX_F16C, @ref CORRADE_TARGET_AVX_FMA,
    @ref CORRADE_TARGET_AVX2, @ref CORRADE_TARGET_AVX512F,
    @ref CORRADE_TARGET_NEON, @ref CORRADE_TARGET_NEON_FMA,
    @ref CORRADE_TARGET_NEON_FP16 and @ref CORRADE_TARGET_SIMD128 preprocessor
    variables added to the already existing @ref CORRADE_TARGET_SSE2 for
    detecting enabled instruction sets on x86, ARM and WebAssembly
-   New @ref CORRADE_TARGET_32BIT preprocessor variable for cross-platform
    detection of 32-bit builds
-   New @ref Cpu namespace that provides building blocks for compile-time and
    runtime CPU feature detection and dispatch on x86, ARM and WebAssembly
    (see [mosra/corrade#115](https://github.com/mosra/corrade/pull/115))

@subsubsection corrade-changelog-latest-new-containers Containers library

-   New @ref Containers::ArrayTuple class for coalescing arrays of homogeneous
    types and varying lengths into a single allocation. See also
    [mosra/magnum#505](https://github.com/mosra/magnum/issues/505),
    [mosra/corrade#116](https://github.com/mosra/corrade/issues/116) and
    [mosra/corrade#117](https://github.com/mosra/corrade/pull/117).
-   New @ref Containers::BigEnumSet class for storing enum sets with more than
    64 values
-   New @ref Containers::BitArray and @ref Containers::BitArrayView classes for
    owning and non-owning containers of bits
-   New @ref Containers::Iterable helper to provide an indirection for
    iterating over both containers of values and containers of references in
    a single code path
-   New @ref Containers::Pair and @ref Containers::Triple classes that fix
    various issues and pitfalls of @ref std::pair and provide a lightweight
    alternative to a three-element @ref std::tuple
-   New @ref Containers::String class as a lightweight but more flexible
    alternative to @ref std::string
-   New @ref Containers::BasicStringView "Containers::StringView" class as a
    lightweight but more flexible alternative to C++17 @ref std::string_view
-   New @ref Containers::MoveReference and @ref Containers::AnyReference
    counterparts to @ref Containers::Reference for exclusively r-value
    references and both l-value and r-value references
-   Added a @ref Containers::StridedArrayView::slice() overload for slicing
    into @cpp struct @ce members and @cpp class @ce getter functions
-   New @ref Containers::Array2, @ref Containers::Array3 and
    @ref Containers::Array4 convenience aliases for
    @ref Containers::StaticArray, together with @ref Containers::Array1 that's
    useful in case you want to take advantage of the @ref NoInit tag on an
    arbitrary type and @ref Containers::Optional doesn't suit the use case.
-   New @ref Containers::ArrayView2, @ref Containers::ArrayView3 and
    @ref Containers::ArrayView4 convenience aliases for
    @ref Containers::StaticArrayView
-   Added a family of @ref Containers::arrayInsert(),
    @ref Containers::arrayRemove() and @ref Containers::arrayRemoveUnordered()
    functions for arbitrary insertion into and deletion from growable arrays

@subsubsection corrade-changelog-latest-new-pluginmanager PluginManager library

-   The @ref PluginManager library is now free of @ref std::string and
    @ref std::vector usage in all its public APIs except the
    @ref PluginManager::PluginMetadata class. @ref Containers::StringView,
    @ref Containers::String, @ref Containers::ArrayView and
    @ref Containers::Array is used instead, resulting in much less temporary
    allocations and better compile times.
-   New @ref PluginManager::Manager::externalManager() API to allow plugins to
    list, access and instantiate plugins of other types

@subsubsection corrade-changelog-latest-new-testsuite TestSuite library

-   The @ref TestSuite library is now completely free of all @ref std::string
    usage in its public APIs, using only @ref Containers::StringView,
    @ref Containers::String or even just plain @cpp const char* @ce where
    compile times *really* matter
-   New @ref CORRADE_INFO(), @ref CORRADE_WARN() and @ref CORRADE_FAIL_IF()
    macros for printing formatted information to the output and explicitly
    failing a test
-   New @ref CORRADE_SKIP_IF_NO_ASSERT() and
    @ref CORRADE_SKIP_IF_NO_DEBUG_ASSERT() helper macros for easier assertion
    testing
-   New @ref TestSuite::Compare::NotEqual comparator to provide an alternative
    to @cpp CORRADE_VERIFY(a != b) @ce with a better failure diagnostic
-   New @ref TestSuite::Compare::StringHasPrefix,
    @relativeref{TestSuite::Compare,StringHasSuffix},
    @relativeref{TestSuite::Compare,StringContains} and
    @relativeref{TestSuite::Compare,StringNotContains} comparators to provide
    an alternative to @cpp CORRADE_VERIFY(a.hasPrefix(b)) @ce and similar with
    a better failure diagnostic
-   New @ref TestSuite::Compare::Aligned and
    @relativeref{TestSuite::Compare,NotAligned} comparators as a more
    convenient alternative to @ref TestSuite::Compare::Divisible and
    @relativeref{TestSuite::Compare,NotDivisible} when dealing with pointers

@subsubsection corrade-changelog-latest-new-utility Utility library

-   New @ref Utility::flipInPlace() algorithm for in-place flipping of strided
    array views
-   @ref Utility::allocateAligned() family of functions for overaligned
    allocations, suitable for efficient SIMD operations
-   Added @ref Utility::forward() and @ref Utility::move() equivalents to
    @ref std::forward() and @m_class{m-doc-external} [std::move()](https://en.cppreference.com/w/cpp/utility/move)
    without having to pull in everything else from @cpp #include <utility> @ce.
-   Added @ref Utility::Arguments::addArrayArgument() as a positional
    counterpart to @ref Utility::Arguments::addArrayOption()
-   @ref Utility::Configuration and @ref Utility::Arguments can now read and
    write @ref Containers::String and @ref Containers::StringView values,
    @ref Utility::ConfigurationValue can be implemented using those instead of
    @ref std::string as well
-   @ref Utility::ConfigurationGroup gained an ability to iterate through its
    values and subgroups using @relativeref{Utility::ConfigurationGroup,values()}
    and @relativeref{Utility::ConfigurationGroup,groups()}
-   New @ref Corrade::Utility::Json class for tokenizing and parsing JSON files
    into an immutable memory-efficient representation
-   New @ref Corrade::Utility::JsonWriter class for stream-like writing and
    pretty-printing of JSON files
-   New @ref Corrade/Utility/Math.h header implementing @ref Utility::min() and
    @ref Utility::max() because having to @cpp #include <algorithm> @ce to get
    @ref std::min() and @ref std::max() is unacceptable.
-   New @ref Utility::Path::glob() function for listing directory contents
    matching a wildcard pattern
-   Added @ref Utility::String::lowercaseInPlace() and @relativeref{Utility::String,uppercaseInPlace()}
    together with @ref Utility::String::lowercase() and
    @relativeref{Utility::String,uppercase()} overloads taking a
    @ref Containers::StringView
-   New @ref Utility::String::parseNumberSequence() utility for parsing number
    sequences such as `1-3,5,17`, useful especially for convenient command-line
    APIs
-   New @ref CORRADE_INTERNAL_ASSERT_EXPRESSION() macro for assertions that can
    be evaluated directly inside larger expressions
-   New @ref CORRADE_DEBUG_ASSERT(), @ref CORRADE_CONSTEXPR_DEBUG_ASSERT(),
    @ref CORRADE_DEBUG_ASSERT_OUTPUT(), @ref CORRADE_DEBUG_ASSERT_UNREACHABLE(),
    @ref CORRADE_INTERNAL_DEBUG_ASSERT(),
    @ref CORRADE_INTERNAL_CONSTEXPR_DEBUG_ASSERT(),
    @ref CORRADE_INTERNAL_DEBUG_ASSERT_OUTPUT(),
    @ref CORRADE_INTERNAL_DEBUG_ASSERT_EXPRESSION() and
    @ref CORRADE_INTERNAL_DEBUG_ASSERT_UNREACHABLE() macros that expand to
    their non-`DEBUG` counterparts on debug builds and get compiled out on
    release builds. See also [mosra/corrade#136](https://github.com/mosra/corrade/issues/136).
-   New @ref CORRADE_LIKELY() and @ref CORRADE_UNLIKELY() macros for
    instruction cache microoptimizations in tight loops
-   New @ref CORRADE_PASSTHROUGH() helper macro, an inverse of
    @ref CORRADE_NOOP()

@subsection corrade-changelog-latest-changes Changes and improvements

@subsubsection corrade-changelog-latest-changes-containers Containers library

-   Assertions in often-called element access and slicing APIs were converted
    to @ref CORRADE_DEBUG_ASSERT() and friends, meaning they get compiled out
    on release builds for better performance. Complex array casting and slicing
    functionality that's prone to user errors still keeps @ref CORRADE_ASSERT()
    as these functions are not meant to be called in tight loops and the value
    of safety guarantees outweighs negative performance effects.
-   @ref Containers::ArrayView::front(), @ref Containers::ArrayView::back(),
    @ref Containers::StaticArrayView::front() and
    @ref Containers::StaticArrayView::back() is now @cpp constexpr @ce like all
    other access APIs
-   Added @ref Containers::arrayShrink(Array<T>&, DefaultInitT) overload for
    cases where it's not desired to have an @ref Containers::Array with a
    `NoInit` deleter
-   Added @ref Containers::arrayResize(Array<T>&, std::size_t, const typename std::common_type<T>::type&)
    as a convenience shorthand for @ref Containers::arrayResize(Array<T>&, DirectInitT, std::size_t, Args&&... args)
-   @ref Containers::arrayAppend(Array<T>&, ArrayView<const T>) and
    @ref Containers::arrayAppend(Array<T>&, NoInitT, std::size_t) are now no-op
    in case the item count is zero
-   Added an ability to construct a @ref Containers::StridedArrayView1D from a
    pointer and size, the same way as with contiguous array views
-   Added a @ref Containers::stridedArrayView(ArrayView<T>, std::size_t, std::ptrdiff_t)
    helper to complement @ref Containers::stridedArrayView(ArrayView<typename StridedArrayView1D<T>::ErasedType>, T*, std::size_t, std::ptrdiff_t)
-   @ref Containers::Array::Array(InPlaceInitT, std::initializer_list<T>)
    constructor is no longer @cpp explicit @ce to allow for easier use in
    initializer lists
-   @ref Containers::ScopeGuard now has a @ref NoCreate constructor and is
    movable in order to support deferred creation
-   Added a templated overload of @ref Containers::StridedArrayView::asContiguous()
    that flattens the view only from given dimension further, returning a
    @relativeref{Containers,StridedArrayView} again
-   @ref Containers::LinkedList destruction was changed in a way that makes
    @ref Containers::LinkedListItem::list() still accessible in a destructor
    of @ref Containers::LinkedListItem subclasses
-   @ref Containers::Pointer, @ref Containers::Optional,
    @ref Containers::Reference, @ref Containers::MoveReference and
    @ref Containers::AnyReference gained a @relativeref{Containers::Pointer,Type}
    member typedef for consistency with other containers
-   @ref Containers::StridedArrayView can now be used in STL algorithms such as
    @ref std::lower_bound() if you include @ref Corrade/Containers/StridedArrayViewStl.h

@subsubsection corrade-changelog-latest-changes-pluginmanager PluginManager library

-   The @cmake corrade_add_plugin() @ce and
    @cmake corrade_add_static_plugin() @ce
    @ref corrade-cmake-add-plugin "CMake macros" now allow the metadata file
    path to be absolute as well, which is useful when the file has the contents
    generated.

@subsubsection corrade-changelog-latest-changes-testsuite TestSuite library

-   Added a @ref TestSuite::Tester::testName() getter, used by Magnum Vulkan
    tests to provide application name for each executable
-   New @ref TestSuite::Tester::setTestCaseTemplateName() overload taking a
    list of strings for test cases templated by more than one parameter
-   The @ref CORRADE_VERIFY() macro now now accepts varargs, meaning that you
    no longer need to wrap expressions containing commas in extra parentheses
-   The @ref CORRADE_SKIP(), @ref CORRADE_EXPECT_FAIL() and
    @ref CORRADE_EXPECT_FAIL_IF() macros now accept messages in the same form
    as @ref CORRADE_ASSERT(), that is anything that can be printed with
    @ref Utility::Debug as well as chaining the pieces with @cpp << @ce.
-   Test executables now accept `-X` and `-S` as a shorthand to often used
    `--abort-on-fail` and `--save-diagnostic`
    @ref TestSuite-Tester-command-line "command-line options"
-   When the `--no-catch` option is passed, @ref TestSuite::Tester doesn't
    rethrow exceptions derived from @ref std::exception but instead lets them
    go directly to make the backtrace point to the original exception location
    and not to where it got rethrown from.
-   The `--skip` and `--only` @ref TestSuite::Tester options now accept a more
    flexible syntax from @ref Utility::String::parseNumberSequence(), allowing
    arbitrary ranges to be specified in a succint way
-   @ref TestSuite::Compare::SortedContainer can now work with non-copyable
    containers (such as @ref Containers::Array) and containers without random
    access (such as @ref std::list or @ref std::unordered_map).

@subsubsection corrade-changelog-latest-changes-utility Utility library

-   @ref Utility::Arguments can now recognize short options packed together
    (e.g. `-xzOfile.dat` is equivalent to `-x -z -O file.dat` providing `-x`
    and `-z` are boolean options)
-   Removed unnecessarily excessive @cpp char** @ce overloads in
    @ref Utility::Arguments in favor of a single one (see
    [mosra/corrade#](https://github.com/mosra/corrade/pull/142))
-   New @ref Utility::copy(std::initializer_list<typename ToView::Type>, To&&)
    overload for easy populating of arrays and views
-   @cpp !Debug{} @ce or @ref Utility-Debug-source-location "source location output in Debug"
    is now enabled on MSVC 2019 16.6+ as well, making it available across all
    compilers
-   @ref Utility::Debug now accepts also a C++17 @ref std::string_view if
    you include @ref Corrade/Utility/DebugStlStringView.h
-   Improved error handling in @ref Utility::Path APIs where all APIs now
    consistently print an error code and message coming from the system on
    failure instead of a generic message or nothing at all
-   @ref Utility::Path::isDirectory() now follows symlinks on Unix platforms
-   @ref Utility::Path::ListFlag::SkipFiles and
    @ref Utility::Path::ListFlag::SkipDirectories passed to
    @ref Utility::Path::list() now affects symlinks as well --- previously they
    were treated as neither, now they get correctly skipped based on whether
    the target is a file or a directory
-   @ref Utility::Path::ListFlag::SkipSpecial passed to
    @ref Utility::Path::list() now has no effect on Emscripten, the same
    as on Windows, as those two platforms have no notion of a special file.
    Previously this behaved equivalently to
    @ref Utility::Path::ListFlag::SkipFiles on Emscripten but that made no
    sense from a portability point of view.
-   @ref Utility::Path::size(), @relativeref{Utility::Path,read()} and
    @relativeref{Utility::Path,copy()} now explicitly check if the path is a
    directory and fail in that case, instead of returning nonsense, crashing on
    an allocation failure or silently doing the wrong thing
-   @ref Utility::format() now supports printing integers as characters using
    the @cpp "{:c}" @ce modifier
-   @ref Utility::format() now accepts also a C++17 @ref std::string_view if
    you include @ref Corrade/Utility/FormatStlStringView.h
-   @ref Utility::String::split() and
    @ref Utility::String::splitWithoutEmptyParts() now have
    @ref Containers::StringView overloads that allocate much less
-   Ability to print @ref Containers::BasicStringView and
    @ref Containers::String using @ref Utility::format()
-   Creating an empty path with @ref Utility::Path::make() now succeeds because
    it makes no sense to fail for such case
-   @ref Utility::IsStringLike now recognizes also C++17 @ref std::string_view
    by checking for a @cpp substr() @ce member instead of @cpp c_str() @ce
-   The @ref CORRADE_LONG_DOUBLE_SAME_AS_DOUBLE macro is now defined on
    Emscripten always, because even if it's @cpp long double @ce is 80-bit
    sometimes, it doesn't actually have the precision of a 80-bit
    representation
-   The @ref CORRADE_FALLTHROUGH macro is implemented on MSVC 2019 16.6 if
    compiling as C++17.
-   Minor exception guarantee improvements (see [mosra/corrade#148](https://github.com/mosra/corrade/pull/148))

@subsection corrade-changelog-latest-buildsystem Build system

-   The oldest supported Clang version is now 6.0 (available on Ubuntu 18.04),
    or equivalently Apple Clang 10.0 (Xcode 10). Oldest supported GCC version
    is still 4.8.
-   The `-o` option in the @ref acme utility now treats the argument as a file
    if it doesn't exist and a directory only if it exists and is a directory
    (see [mosra/corrade#90](https://github.com/mosra/corrade/issues/90))
-   Fixed a potential error in `UseCorrade.cmake` that would happen when
    compiling with an unrecognized compiler (see [mosra/magnum#457](https://github.com/mosra/magnum/issues/457))
-   The `version.h` header now gets populated from Git correctly also when
    inside a CMake subproject
-   The @cmake corrade_add_test() @ce, @cmake corrade_add_plugin() @ce,
    @cmake corrade_add_static_plugin() @ce and @cmake corrade_add_resource() @ce
    CMake functions now check for presence of the targets they depend on,
    giving the user a clear message in case something is missing (see
    [mosra/corrade#101](https://github.com/mosra/corrade/pull/101))
-   Attempted a switch of Emscripten build on Travis CI from macOS to Ubuntu +
    Docker for 2x faster build times in a futile attempt to not use the
    extremely expensive features of a no-longer-free service. Ultimately,
    Travis banned everyone from using their CI and so all Linux, macOS,
    Emscripten, Android and iOS builds were migrated from Travis to Circle CI,
    together with adding also an explicit ARM64 build. See
    [mosra/corrade#105](https://github.com/mosra/corrade/pull/105),
    [mosra/magnum#350](https://github.com/mosra/magnum/issues/350) and
    [mosra/magnum#523](https://github.com/mosra/magnum/issues/523).
-   On CMake 3.16 and newer, `FindCorrade.cmake` can provide additional details
    if some component is not found
-   The Homebrew package now uses `std_cmake_args` instead of hardcoded build
    type and install prefix, which resolves certain build issues (see
    [mosra/homebrew-magnum#6](https://github.com/mosra/homebrew-magnum/pull/6))
-   @ref CORRADE_DEPRECATED_ENUM() is now a no-op for Qt's Meta Object Compiler
    as it caused parse errors on older Qt versions
-   With CMake 3.20 and newer it's possible to compile for Android NDK r19+
    without explicitly supplying various system paths. Additionally, when `CMAKE_INSTALL_PREFIX` points to Android NDK sysroot, the `LIB_SUFFIX`
    gets autodetected to a correct triplet + API level version subdirectory,
    making the installed project discoverable by both vanilla CMake and Gradle.
    On CMake 3.16 to 3.19 it's required to set two extra variables for the
    same effect. See @ref building-corrade-cross-android and
    [mosra/magnum#310](https://github.com/mosra/magnum/issues/310) for more
    information.
-   Updated Debian build instructions to pass `--no-sign` to
    `dpkg-buildpackage`, avoiding a confusing error message that might lead
    people to think the packaging failed (see [mosra/magnum-plugins#105](https://github.com/mosra/magnum-plugins/issues/105))
-   Updated Emscripten toolchains to not pass `-s WASM` to the compiler, as
    only the linker needs it and recent versions complain loudly (see
    [mosra/toolchains#16](https://github.com/mosra/toolchains/pull/16))
-   Updated Emscripten toolchains to set `CMAKE_<LANG>_COMPILER` to the cache
    so MSVC IntelliSense can work with it (see
    [mosra/toolchains#17](https://github.com/mosra/toolchains/pull/17))
-   @ref Corrade/Utility/Memory.h now has @cpp #include <malloc.h> @ce on
    Windows as well instead of declaring aligned memory allocation functions on
    its own, as it's not worth the seriously-looking compiler warnings (see
    [mosra/corrade#145](https://github.com/mosra/corrade/issues/145))
-   Platforms that support @ref CORRADE_CPU_USE_IFUNC will now build certain
    code paths optimized for multiple architectures, with the best variant
    selected at runtime using the @ref Cpu library based on available CPU
    features. This behavior can be disabled with the
    @ref CORRADE_BUILD_CPU_RUNTIME_DISPATCH CMake option. Platforms without
    IFUNC support implement runtime dispatch using function pointers instead of
    indirect functions and have this currently disabled by default.

@subsection corrade-changelog-latest-bugfixes Bug fixes

-   @ref Containers::arrayReserve() was not correctly propagating an explicit
    allocator argument when checking for capacity, using always the implicit
    one, and thus resulting in unnecessary reallocation in some cases
    @ref Containers::arrayAppend(Array<T>&, std::initializer_list<T>) was not
    correctly propagating an explicit allocator argument, causing the array to
    be always reallocated using the implicit one
-   @ref Utility::Path::libraryLocation() documentation now mentions caveats
    related to position-independent code on Unix platforms and the
    corresponding test was fixed to ensure the preconditions are met. See also
    [mosra/corrade#135](https://github.com/mosra/corrade/issues/135).
-   @ref Utility::Path::list() was leaking the file handle on Windows (see
    [mosra/corrade#99](https://github.com/mosra/corrade/pull/99))
-   Fixed @ref Utility::Path::move() to overwrite the destination if it exists
    also on Windows, consistently with other platforms (see
    [mosra/corrade#143](https://github.com/mosra/corrade/pull/143))
-   Fixed @ref Utility::Path::homeDirectory() and
    @relativeref{Utility::Path,configurationDirectory()} to not use an old
    Windows API that tends to prefer OneDrive over local user directories
    (see [mosra/corrade#144](https://github.com/mosra/corrade/pull/144))
-   Added GCC 4.8-specific workarounds to @ref Containers::Array, growable
    array utils, @ref Containers::Optional, @ref Containers::Pointer and
    @ref Containers::StaticArray where using @cpp T{b} @ce or
    @cpp T{std::move(b)} @ce to perform copy/move-construction on a plain
    @cpp struct @ce would cause GCC 4.8 to attempt to construct the members
    directly instead of invoking a copy/move-constructor, using @cpp () @ce
    instead works.
-   When crosscompiling with Corrade as a CMake subproject and not using
    @cmake find_package() @ce, @cmake corrade_add_resource() @ce failed late
    during build on the `Corrade::rc` target not being defined (see
    [mosra/corrade#101](https://github.com/mosra/corrade/pull/101))
-   On Emscripten, @ref Utility::Arguments used an internal allocation
    function, which changed signature in 2.0.5 and caused runtime failures
    when `-s ASSERTIONS` was enabled. A public stable API is now used instead,
    see [mosra/corrade#106](https://github.com/mosra/corrade/pull/106).
-   @ref Containers::Array growable utilities, @ref Containers::String,
    @ref Utility::copy(), @ref Utility::format() and @ref Utility::Sha1 was
    fixed to not call @ref std::memcpy() with @cpp nullptr @ce when size is
    zero (see [mosra/corrade#102](https://github.com/mosra/corrade/issues/102))
-   Fixed @ref Utility::Arguments to produce an error instead of asserting in
    case a positional argument is specified as named
-   Deep @ref Utility::ConfigurationGroup assignments didn't properly reassign
    the @relativeref{Utility::ConfigurationGroup,configuration()} pointer,
    leading to an assertion on save
-   @ref Corrade/Utility/StlForwardTuple.h was fixed to do a full
    @cpp #include <tuple> @ce on libstdc++ before version 7 as there a forward
    declaration is not available
-   Tests ran using CTest under Emscripten used to have
    `--stack-trace-limit=0` set, preventing Node.js from printing a backtrace
    on exception. This was originally needed because historically Emscripten
    applications didn't correctly propagate @cpp main() @ce return codes, which
    had to be worked around by throwing an exception instead. This workaround
    became obsolete and got removed in 2017, but this option was left there by
    accident. Now it's removed as well.
-   Calling @ref PluginManager::AbstractManager::setPreferredPlugins() with a
    plugin of given alias being instantiated led to an internal assertion when
    the plugin got later unloaded.
-   Fixed @ref PluginManager::AbstractManager::load() and
    @relativeref{PluginManager::Manager,loadAndInstantiate()} to properly
    interpret non-absolute plugin filenames as relative to current working
    directory instead of passing them directly to OS APIs, which then attempt
    to load them from OS-specific locations and fail
-   @ref TestSuite::Compare::SortedContainer no longer modifies order of
    referenced elements when non-owning views are passed to it

@subsection corrade-changelog-latest-deprecated Deprecated APIs

-   All @ref building-corrade-features "CMake build options" are now prefixed
    with `CORRADE_`. For backwards compatibility, unless
    @ref CORRADE_BUILD_DEPRECATED is disabled and unless a prefixed option is
    already set during the initial run, the unprefixed options are still
    recognized with a warning. In particular, if `BUILD_DEPRECATED` is set but
    `CORRADE_BUILD_DEPRECATED` not, the unprefixed options are also recognized.
    See also [mosra/corrade#139](https://github.com/mosra/corrade/issues/139).
-   @cpp Containers::Array::empty() @ce, @cpp ArrayView::empty() @ce,
    @cpp StaticArray::empty() @ce, @cpp StaticArrayView::empty() @ce and
    @cpp StridedArrayView::empty() @ce is deprecated in favor of
    @ref Containers::Array::isEmpty,
    @relativeref{Containers,ArrayView::isEmpty()},
    @relativeref{Containers,StaticArray::isEmpty()},
    @relativeref{Containers,StaticArrayView::isEmpty()} and
    @relativeref{Containers,StridedArrayView::isEmpty()}. The original name was chosen only to match what STL did, but it could be confused with "make the
    array empty" (i.e., what `clear()` does) and it was inconsistent with all
    other APIs returning a @cpp bool @ce as well as the new
    @ref Containers::String and @ref Containers::BasicStringView "StringView"
    APIs, which all use `isSomething()` instead.
-   @ref Containers::Array, @relativeref{Containers,ArrayView},
    @relativeref{Containers,StaticArray},
    @relativeref{Containers,StaticArrayView} and
    @relativeref{Containers,StridedArrayView} slicing APIs were reworked for
    more consistency. In particular:
    -   @cpp except() @ce is deprecated in favor of
        @relativeref{Containers::ArrayView,exceptSuffix()}, being consistent
        with the new @ref Containers::StringView::exceptSuffix(StringView) const
        API
    -   @cpp suffix() @ce is deprecated in favor of
        @relativeref{Containers::ArrayView,exceptPrefix()}, being consistent
        with the new @ref Containers::StringView::exceptPrefix(StringView) const
        API, as both take a prefix length, and not suffix length. The
        @cpp suffix() @ce API, taking a suffix length instead of an offset, is
        scheduled to be reintroduced once enough time passes after the
        deprecated API gets removed to avoid silent breakages in existing code.
-   @cpp Utility::Directory::isSandboxed() @ce is deprecated in favor of
    @ref Utility::System::isSandboxed(), as that's the better place for this
    API to live in
-   All other @cpp Utility::Directory @ce APIs are deprecated in favor of a new
    @ref Utility::Path namespace. It uses the more efficient
    @ref Containers::StringView instead of @ref std::string for function
    arguments and non-owned return values, @ref Containers::String
    instead of @ref std::string for owned return values, wraps return values
    for all failable APIs in a @ref Containers::Optional and makes various API
    naming cleanups and clarifications. Because of the sweeping nature of the
    changes, it was not possible to make these updates
    in @cpp Utility::Directory @ce directly, as it would cause basically all
    existing code to break. Thus the new APIs are in a completely new
    namespace:
    -   @cpp Utility::Directory::fromNativeSeparators() @ce and
        @cpp toNativeSeparators() @ce is deprecated in favor
        of @ref Utility::Path::fromNativeSeparators() and
        @relativeref{Utility::Path,toNativeSeparators()}
    -   @cpp Utility::Directory::path() @ce and @cpp filename() @ce is
        deprecated in favor of @ref Utility::Path::split() that returns both
        parts together
    -   @cpp Utility::Directory::splitExtension() @ce is deprecated in favor of
        @ref Utility::Path::splitExtension()
    -   @cpp Utility::Directory::join() @ce is deprecated in favor of
        @ref Utility::Path::join()
    -   @cpp Utility::Directory::list() @ce, @cpp Flag @ce and @cpp Flags @ce
        are deprecated in favor of @ref Utility::Path::list(),
        @relativeref{Utility::Path,ListFlag} and
        @relativeref{Utility::Path,ListFlags}, returning the list wrapped in a
        @ref Containers::Optional
    -   @cpp Utility::Directory::mkpath() @ce, @cpp rm() @ce and
        @cpp move() @ce are deprecated in favor of @ref Utility::Path::make(),
        @relativeref{Utility::Path,remove()} and
        @relativeref{Utility::Path,move()}
    -   @cpp Utility::Directory::current() @ce, @cpp libraryLocation() @ce,
        @cpp executableLocation() @ce, @cpp home() @ce,
        @cpp configurationDir() @ce and @cpp tmp() @ce are deprecated in favor
        of @ref Utility::Path::currentDirectory(),
        @relativeref{Utility::Path,libraryLocation()},
        @relativeref{Utility::Path,executableLocation()},
        @relativeref{Utility::Path,homeDirectory()},
        @relativeref{Utility::Path,configurationDirectory()} and
        @relativeref{Utility::Path,temporaryDirectory()}, all returning the
        path wrapped in a @ref Containers::Optional
    -   @cpp Utility::Directory::exists() @ce and @cpp isDirectory() @ce is
        deprecated in favor of @ref Utility::Path::exists() and
        @relativeref{Utility::Path,isDirectory()}
    -   @cpp Utility::Directory::fileSize() @ce is deprecated in favor of
        @ref Utility::Path::size()
    -   @cpp Utility::Directory::read() @ce is deprecated in favor of
        @ref Utility::Path::read(), returning a @ref Containers::Optional
    -   @cpp Utility::Directory::readString() @ce is deprecated in favor of
        @ref Utility::Path::readString(), returning a
        @ref Containers::String in a @ref Containers::Optional, transferring
        the memory ownership from a @ref Containers::Array instead of making a
        copy
    -   @cpp Utility::Directory::write() @ce, @cpp writeString() @ce,
        @cpp append() @ce and @cpp appendString() @ce are deprecated in favor
        of @ref Utility::Path::write() and
        @relativeref{Utility::Path,append()}. Because a
        @ref Containers::StringView is implicitly convertible to a
        @ref Containers::ArrayView<const void>, there's no need for a dedicated
        string overload anymore.
    -   @cpp Utility::Directory::copy() @ce is deprecated in favor of
        @ref Utility::Path::copy(),
    -   @cpp Utility::Directory::map() @ce, @cpp mapRead() @ce,
        @cpp mapWrite() @ce and @cpp MapDeleter @ce are deprecated in favor of
        @ref Utility::Path::map(), @relativeref{Utility::Path,mapRead()},
        @relativeref{Utility::Path,mapWrite()} and
        @relativeref{Utility::Path,MapDeleter}, returning the mapped array
        wrapped in an @ref Containers::Optional
-   The @ref Utility::Resource class was ported to use
    @ref Containers::StringView instead of @ref std::string,
-   @cpp Utility::Resource::get() @ce is deprecated in favor of
    @ref Utility::Resource::getString(). The @cpp get() @ce API is scheduled to
    be reintroduced --- with a @ref Containers::ArrayView return type
    consistent with @ref Utility::Path::read() and
    @ref Utility::Path::readString() --- once enough time passes after the
    deprecated API gets removed to avoid silent breakages in existing code.
-   @ref Utility::String::split() and
    @ref Utility::String::splitWithoutEmptyParts() overloads taking
    @ref Containers::BasicStringView are deprecated in favor of
    @ref Containers::BasicStringView::split() and
    @ref Containers::BasicStringView::splitWithoutEmptyParts();
    the overloads taking @ref std::string are still kept
-   @cpp Utility::String::viewBeginsWith() @ce and
    @cpp Utility::String::viewEndsWith() @ce variants of
    @ref Utility::String::beginsWith() / @ref Utility::String::endsWith() are
    deprecated in favor of @ref Containers::BasicStringView::hasPrefix() and
    @ref Containers::BasicStringView::hasSuffix(); the overloads taking
    @ref std::string are still kept
-   @cpp CORRADE_ALIGNAS() @ce and @cpp CORRADE_NORETURN @ce macros are
    deprecated as they were originally introduced for compatibility with GCC
    4.7 and older and aren't needed anymore. Use the standard C++11
    @cpp alignas() @ce and @cpp [[noreturn]] @ce attributes instead.
-   The @ref CORRADE_ASSUME() macro is moved from @ref Corrade/Utility/Assert.h
    to @ref Corrade/Utility/Macros.h, as it's a lightweight annotation that
    doesn't depend on any debug output. If @ref CORRADE_BUILD_DEPRECATED is
    enabled, the @ref Corrade/Utility/Assert.h pulls it in for backwards
    compatibility.
-   The `CORRADE_INCLUDE_INSTALL_PREFIX` variable, needed for installations
    into older Android NDKs, is obsolete and no longer needed for NDK r19+. It
    still does what's expected on builds with `CORRADE_BUILD_DEPRECATED`
    enabled, however you'll get a deprecation notice. Since the variable got
    saved to CMake cache, to get rid of the message, you may need to either
    recreate your build directory or explicitly delete it from the cache.
-   The @cpp Corrade/Containers/Tags.h @ce header,
    @cpp Containers::DefaultInit @ce, @cpp Containers::ValueInit @ce,
    @cpp Containers::NoInit @ce, @cpp Containers::NoCreate @ce,
    @cpp Containers::DirectInit @ce, @cpp Containers::InPlaceInit @ce and
    related tag types were moved to @ref Corrade/Tags.h and the root
    @ref Corrade namespace, available  as @ref DefaultInit, @ref ValueInit,
    @ref NoInit, @ref NoCreate, @ref DirectInit, @ref InPlaceInit and related
    tag types
-   @ref PluginManager and @ref TestSuite APIs that switched from
    @ref std::string to @ref Containers::StringView or @ref Containers::String
    now include @ref Corrade/Containers/StringStl.h for compatibility when
    building with @ref CORRADE_BUILD_DEPRECATED enabled. Include this header
    explicitly in your code if you wish to continue to rely on implicit
    conversion from a @ref std::string.
-   To avoid unconditionally including relatively heavy headers,
    @ref PluginManager::Manager now has the template definitions moved into
    @ref Corrade/PluginManager/Manager.hpp. This header is implicitly included
    from the `*.h` for backwards compatibility if @ref CORRADE_BUILD_DEPRECATED
    is defined. While nothing changes when using builtin Corrade and Magnum
    plugin interfaces, for custom interfaces you need to either include this header explicitly or perform an explicit template instantiation as
    described in @ref PluginManager-Manager-template-definitions.

@subsection corrade-changelog-latest-compatibility Potential compatibility breakages, removed APIs

-   All includes of @ref Corrade/Containers/PointerStl.h that were added in
    2019.01 for preserving backwards compatibility after the move from
    @ref std::unique_ptr to @ref Containers::Pointer are now removed. This
    should have a significant positive effect on compile times of code using
    especially the @ref PluginManager library.
-   @cpp Containers::ScopedExit @ce, deprecated in 2019.01, is removed, use
    @ref Containers::ScopeGuard instead
-   Removed the `CORRADE_CXX_FLAGS` CMake variable, which was deprecated in
    favor of the `CORRADE_USE_PEDANTIC_FLAGS` target property in 2016.
-   Removed a dependency of `UseCorrade` on `UseEmscripten` to allow 3rd party
    Emscripten toolchains to be used. This may break code that uses the
    @cmake emscripten_embed_file() @ce CMake function, to fix that either
    explicitly @cmake include(UseEmscripten) @ce or update the `toolchains`
    submodule, which now includes the file implicitly. See
    [mosra/corrade#104](https://github.com/mosra/corrade/issues/104).
-   @ref Containers::LinkedList destruction was changed in a way that makes
    @ref Containers::LinkedListItem::list() still accessible in a destructor
    of @ref Containers::LinkedListItem subclasses. This behavior didn't make
    sense and so it's not assumed any existing code relied on it, nevertheless
    it's a subtle change in behavior that is worth mentioning.
-   @ref PluginManager::AbstractManager::pluginList() and
    @relativeref{PluginManager::AbstractManager,aliasList()} now return a
    @ref Containers::Array of @ref Containers::String instead of a
    @ref std::vector of @ref std::string. As the change was done to avoid
    including a heavy @ref std::vector, no backwards compatibility is done.
-   Overrides of @ref PluginManager::AbstractPlugin::pluginInterface(),
    @relativeref{PluginManager::AbstractPlugin,pluginSuffix()} and
    @relativeref{PluginManager::AbstractPlugin,pluginMetadataSuffix()} are now
    expected to return a global @ref Containers::StringView, i.e. a string view
    literal, instead of a @ref std::string. Since a global view has to be
    explicitly made, no backwards compatibility can be provides
-   Override of @ref PluginManager::AbstractPlugin::pluginSearchPaths() is now
    expected to return a @ref Containers::Array of @ref Containers::String
    instead of a @ref std::vector of @ref std::string, similarly
    @ref PluginManager::implicitPluginSearchPaths() is changed to match that.
    As the change was done to avoid including a heavy @ref std::vector, no
    backwards compatibility is done.
-   Due to changes to @ref CORRADE_SKIP() internals, passing a @ref std::string
    to it now requires an explicit @cpp #include <Corrade/Utility/DebugStl.h> @ce.
    Alternatively, if string concatenation was used, you can compose the
    message by chaining @ref Utility::Debug output operators instead.
-   @ref Utility::String::lowercase() and @ref Utility::String::uppercase()
    now has overloads for both @ref Containers::StringView and
    @ref std::string, which may cause ambiguous overload errors for existing
    code that passes @cpp const char* @ce to it. Given that either type is
    valid now, the code has to be updated to explicitly pass that type to the
    function.
-   @ref Utility::format() now returns a @ref Containers::String instead of
    @ref Containers::Array and @ref Utility::formatInto() now takes a
    @ref Containers::MutableStringView instead of @ref Containers::ArrayView.
    The types are however implicitly convertible and thus breakages are not
    expected in majority of existing code.
-   Printing a C++17 @ref std::string_view with @ref Utility::Debug now
    requires the @ref Corrade/Utility/DebugStlStringView.h include. Before it
    was printed as a numeric container due to @ref Utility::IsStringLike not
    recognizing it.
-   @cpp Utility::Resource::compile() @ce and
    @cpp Utility::Resource::compileFrom() @ce APIs are no longer public, but
    rather a private detail of the @ref corrade-rc "corrade-rc" utility.
-   @cpp Utility::Resource::list() @ce now returns a @ref Containers::Array of
    @ref Containers::StringView instead of a @ref std::vector. Because the
    reason for this change was to get rid of @cpp #include <vector> @ce, no
    backwards compatibility is provided.
-   With the ongoing process to make the APIs less STL dependent,
    @ref Utility::Unicode::narrow() and @relativeref{Utility::Unicode,widen()}
    variants taking a view or a char pointer now return either a
    @ref Containers::String or a @ref Containers::Array "Containers::Array<wchar_t>"
    instead of @ref std::string or @ref std::wstring.
    @ref Corrade/Containers/StringStl.h is included for implicit conversions
    from/to a @ref std::string, but there's no implicit conversion for the
    @ref std::wstring side. The overloads taking a @ref std::string /
    @ref std::wstring are kept, use them explicitly if you want to have a STL
    type returned as well.

@subsection corrade-changelog-latest-documentation Documentation

-   Added a @ref Containers-mapping "table mapping between STL and Corrade containers"
-   New and thorough documentation for the @ref Utility::Resource class
-   Various fixes (see [mosra/corrade#108](https://github.com/mosra/corrade/pull/108),
    [mosra/corrade#119](https://github.com/mosra/corrade/pull/119),
    [mosra/corrade#120](https://github.com/mosra/corrade/pull/120))

@section corrade-changelog-2020-06 2020.06

Released 2020-06-27, tagged as
[v2020.06](https://github.com/mosra/corrade/releases/tag/v2020.06).

@subsection corrade-changelog-2020-06-new New features

-   Clang-CL is now a supported compiler on Windows. See also
    [mosra/corrade#40](https://github.com/mosra/corrade/issues/40).
-   New @ref CORRADE_TARGET_GCC, @ref CORRADE_TARGET_CLANG,
    @ref CORRADE_TARGET_APPLE_CLANG, @ref CORRADE_TARGET_CLANG_CL,
    @ref CORRADE_TARGET_MSVC and @ref CORRADE_TARGET_MINGW variables for easier
    compiler identification
-   New @ref CORRADE_TARGET_SSE2 providing an *extremely minimal* SIMD feature
    detection. More extensions to come later.
-   New @ref CORRADE_TARGET_BIG_ENDIAN macro. A variant of this macro called
    just @cpp CORRADE_BIG_ENDIAN @ce was used internally for a long time, now
    it's been exposed publicly.
-   New @ref CORRADE_CONSTEXPR14 macro for marking @cpp constexpr @ce functions
    that make use of C++14 relaxed constexpr rules but still need to work under
    C++11 as well.

@subsubsection corrade-changelog-2020-06-new-containers Containers library

-   New @ref Containers::arrayAppend(), @ref Containers::arrayReserve() family
    of functions for opt-in growable arrays. See @ref Containers-Array-growable
    and [mosra/corrade#83](https://github.com/mosra/corrade/issues/83) for more
    information.
-   Added @ref Containers::arrayCast() overloads for casting from the
    @ref Containers::ArrayView<void> and @ref Containers::ArrayView<const void>
    specializations
-   New @ref Containers::StridedArrayView<dimensions, void> and
    @ref Containers::StridedArrayView<dimensions, const void> together with
    corresponding @ref Containers::arrayCast() overloads for type-erased
    @cpp constexpr @ce enabled passing of strided array views similarly to the
    existing @ref Containers::ArrayView<void> and
    @ref Containers::ArrayView<const void> types
-   New @ref Containers::stridedArrayView() convenience overload taking
    explicit stride and size parameters
-   New @ref Containers::array(std::initializer_list<T>),
    @ref Containers::arrayView(std::initializer_list<T>) and
    @ref Containers::stridedArrayView(std::initializer_list<T>) helpers for
    turning initializer lists into (strided) array(view)s. These are
    deliberately not present as constructors as there would be various caveats
    with such approach.
-   Added @ref Containers::StridedArrayView::isContiguous() and
    @ref Containers::StridedArrayView::asContiguous() "asContiguous()" for
    checking and conversion to a tightly packed view
-   New @ref Containers::enumCastUnderlyingType() utility functions for
    casting an @cpp enum @ce or @ref Containers::EnumSet to its underlying type

@subsubsection corrade-changelog-2020-06-new-pluginmanager PluginManager library

-   Added @ref PluginManager::implicitPluginSearchPaths() for a well-documented
    and reliable way to supply plugin search paths consistent for all for
    plugin interfaces
-   Ability to override plugin binary and metadata file extensions on a
    per-interface basis using @ref PluginManager::AbstractPlugin::pluginSuffix()
    and @ref PluginManager::AbstractPlugin::pluginMetadataSuffix()

@subsubsection corrade-changelog-2020-06-new-testsuite TestSuite library

-   New @ref CORRADE_ITERATION() macro for annotating loops
-   Added @ref TestSuite::Compare::Divisible and
    @ref TestSuite::Compare::NotDivisible pseudo-types for checking
    divisibility with clear diagnostic messages

@subsubsection corrade-changelog-2020-06-new-utility Utility library

-   Added @ref Utility::Arguments::setParseErrorCallback() for implementing
    additional argument parsing logic and overriding the default behavior
-   Added @ref Utility::Arguments::addArrayOption() for an ability to supply
    a sequence of values to the same option
-   Ability to optionally prefix @ref Utility::Debug output with a source file
    and line on supported compilers. See @ref Utility-Debug-source-location and
    [mosra/corrade#55](https://github.com/mosra/corrade/pull/55) for more
    information.
-   New @ref CORRADE_ASSUME() macro for providing hints to the compiler
    similarly to @ref CORRADE_INTERNAL_ASSERT() but without asserting when the
    condition isn't @cpp true @ce
-   New @ref CORRADE_FALLTHROUGH macro for suppressing warnings on fall-through
    @cpp switch @ce cases
-   Added a @ref CORRADE_STD_IS_TRIVIALLY_TRAITS_SUPPORTED macro into
    @ref Corrade/Utility/TypeTraits.h denoting if @ref std::is_trivially_copyable
    is available in the standard library
-   Added a @ref CORRADE_LONG_DOUBLE_SAME_AS_DOUBLE macro for detecting
    platforms where @cpp long double @ce and @cpp double @ce have the same size
-   Added @cpp Utility::Directory::map(const std::string&) @ce that provides
    read-write access to mapped files without truncating them.
-   Added @cpp Utility::Directory::fileSize() @ce
-   New @ref Utility::Endianness::littleEndianInPlace() and
    @ref Utility::Endianness::bigEndianInPlace() overloads taking strided array
    views
-   Exposed @ref Utility::Endianness::swapInPlace() as a counterpart to
    @ref Utility::Endianness::littleEndianInPlace() and
    @ref Utility::Endianness::bigEndianInPlace()
-   New family of @ref Utility::copy() functions to efficiently copy
    multi-dimensional @ref Containers::StridedArrayView instances
-   Added a @ref Utility::Debug::space modifier that's similar to
    @ref Utility::Debug::newline and an inverse of @ref Utility::Debug::nospace
-   Added a @ref Utility::Endianness::fourCC() utility for creating
    endian-independent four-character codes

@subsection corrade-changelog-2020-06-changes Changes and improvements

-   @ref TestSuite::Tester and the @ref CORRADE_INTERNAL_ASSERT() family of
    macros now prints file/line info in test failures as a more compact
    @cb{.shell-session} <file>:<line> @ce, which is consistent with
    @ref Utility-Debug-source-location "Utility::Debug source location" and how
    GCC or GDB print those
-   Added an ability to disable unique globals across shared libraries using
    @ref CORRADE_BUILD_STATIC_UNIQUE_GLOBALS on static builds that don't need
    it
-   Library version is now exposed through `CORRADE_VERSION_YEAR`,
    `CORRADE_VERSION_MONTH`, `CORRADE_VERSION_COMMIT`, `CORRADE_VERSION_HASH`
    and `CORRADE_VERSION_STRING` preprocessor defines in a new
    `Corrade/version.h` header. This header is not included by any other header
    to avoid trigerring a full rebuild when Git commit changes. If Git is not
    found, only the first two defines are present.

@subsubsection corrade-changelog-2020-06-changes-containers Containers library

-   @ref Containers::Array::Array(NoInitT, std::size_t) is now equivalent to
    @ref Containers::Array::Array(DefaultInitT, std::size_t) for trivial types.
    This is done in order to avoid needless problems with dangling custom
    deleters when returning arrays from dynamically loaded libraries.
-   @ref Containers::ArrayView compatibility with @ref std::span was updated to
    work with libc++ 9 (and upcoming implementations in GCC and elsewhere), as
    it no longer uses @ref std::ptrdiff_t as a size.
-   @ref Containers::Array move constructor and @ref Containers::Array::release()
    now reset the deleter of the originating array to @cpp nullptr @ce to avoid
    false assumptions about moved-from instances or calling unsuspecting
    deleters on null pointers
-   The dimension-changing @ref Containers::arrayCast(const StridedArrayView<dimensions, T>&)
    utility has a new overload accepting @ref Containers::ArrayView as well,
    and got extended to support reinterpreting the last contiguous dimension
    into a different type
-   In-place element construction in @ref Containers::Array,
    @ref Containers::StaticArray, @ref Containers::Pointer,
    @ref Containers::Optional and growable array utilities now properly handle
    a case of default-constructing a @cpp struct @ce that contains members with
    explicit default constructors. Previously such cases caused a `chosen
    constructor is explicit in copy-initialization` compiler error on Clang and
    a rarer but similar one in case of GCC as well.

@subsubsection corrade-changelog-2020-06-changes-interconnect Interconnect library

-   @ref Interconnect::connect() now can recognize trivially copyable lambdas
    also on GCC versions before 5 and store them more efficiently

@subsubsection corrade-changelog-2020-06-changes-pluginmanager PluginManager library

-   Internals of @ref PluginManager::Manager were rewritten to not need any
    shared global state. This was only needed for inter-manager dependencies,
    which is only very rarely used by Magnum. This feature is now rewritten to
    not need any global state, instead the user is expected to connect manager
    instances together using @ref PluginManager::AbstractManager::registerExternalManager().

@subsubsection corrade-changelog-2020-06-changes-testsuite TestSuite library

-   The @ref CORRADE_VERIFY(), @ref CORRADE_COMPARE(), @ref CORRADE_BENCHMARK()
    and other macros can now be called also from inside lambdas and helper
    functions, not just directly from a @ref TestSuite::Tester subclass
-   Floating-point fuzzy compare epsilons were updated to be consistent with
    @ref Utility::Debug and @ref Utility::format() precision as well as what
    Magnum used. In particular, the epsilons are now @cpp 1.0e-5f @ce,
    @cpp 1.0e-14 @ce and @cpp 1.0e-17l @ce instead of @cpp 1.0e-6f @ce,
    @cpp 1.0e-12 @ce and @cpp 1.0e-15l @ce
-   To avoid aborting the whole test on unhandled exceptions,
    @ref TestSuite::Tester now catches exceptions derived from
    @ref std::exception. See @ref TestSuite-Tester-exceptions for more
    information.

@subsubsection corrade-changelog-2020-06-changes-utility Utility library

-   @ref CORRADE_ASSERT(), @ref CORRADE_CONSTEXPR_ASSERT() and
    @ref CORRADE_ASSERT_OUTPUT() now only return if @ref CORRADE_GRACEFUL_ASSERT
    is defined *and* @ref Utility::Error is redirected, otherwise they call
    @ref std::abort() like if @ref CORRADE_GRACEFUL_ASSERT wouldn't be defined.
    This makes it possible to both verify assertion behavior and catch
    unexpected assertions in tests that enable graceful assertions for larger
    pieces of code.
-   @ref CORRADE_ASSERT_UNREACHABLE() now accepts a message, acting as a
    better alternative to @cpp CORRADE_ASSERT(false, ...) @ce; the original
    functionality is provided by @ref CORRADE_INTERNAL_ASSERT_UNREACHABLE()
-   @ref CORRADE_DEPRECATED_NAMESPACE() now works on GCC 10 as well
-   @ref Utility::Sha1 can now consume also @ref Containers::ArrayView in
    addition to @ref std::string and its internal processing is completely
    allocation-less (see [mosra/corrade#85](https://github.com/mosra/corrade/pull/85))
-   @ref CORRADE_HAS_TYPE() now allows usage of template expressions containing
    commas
-   Enabled @ref Utility::Debug::operator<<(long double) on Emscripten as well,
    as it being unavailable was a pointless restriction hurting portability
-   @cpp Utility::Directory::mkpath() @ce now properly reports errors instead
    of just arrogantly returning @cpp false @ce (see [mosra/corrade#92](https://github.com/mosra/corrade/pull/92))

@subsection corrade-changelog-2020-06-buildsystem Build system

-   Fixed compilation of the @ref main "Corrade::Main" library on i686 MinGW
-   `UseCorrade.cmake` defined `NOMINMAX` and `WIN32_LEAN_AND_MEAN` by mistake
    only on MSVC, causing `windows.h` to leak unforgivable crimes when
    compiling under MinGW (see [mosra/magnum-plugins#74](https://github.com/mosra/magnum-plugins/issues/74))
-   Fixed MSVC detection in `conanfile.py`, made it aware of the
    `MSVC2019_COMPATIBILITY` option as well (see [mosra/corrade#93](https://github.com/mosra/corrade/issues/93))
-   The library again compiles and tests cleanly with @ref CORRADE_NO_ASSERT
    enabled, and this setup is verified on the CI to avoid further regressions
-   Fixes to make the library work under MinGW Clang (see
    [mosra/corrade#95](https://github.com/mosra/corrade/pull/95))
-   Fixed compilation on GCC 10 (see [mosra/corrade#97](https://github.com/mosra/corrade/issues/97))
-   `UseAndroid.cmake` no longer expects `adb` to be in @cb{.sh} $PATH @ce, but
    it locates it relatively to Android SDK (see [mosra/toolchains#10](https://github.com/mosra/toolchains/pull/10))
-   Various warning fixes (see [mosra/corrade#96](https://github.com/mosra/corrade/pull/96))

@subsection corrade-changelog-2020-06-bugfixes Bug fixes

-   The @ref CORRADE_TARGET_LIBSTDCXX macro was defined on GCC < 5 only when
    certain headers were included before. That caused problems especially with
    the new @ref CORRADE_STD_IS_TRIVIALLY_TRAITS_SUPPORTED macro and is now
    fixed to assume old GCC versions always use libstdc++.
-   Fixed an assertion in @ref Utility::Arguments when a single `-` was passed
    on the command-line
-   @ref Utility::Endianness::swapInPlace() and other in-place APIs were fixed
    to work correctly on platforms that don't allow unaligned reads and writes
-   @ref Utility::ConfigurationValue was saving @cpp double @ce and
    @cpp long double @ce with only 6 precision digits due to silly
    @ref std::ostream defaults. Now it prints those with 15 and 18 digits
    respectively, consistent with @ref Utility::Debug and @ref Utility::format()
    output
-   As internals of @ref PluginManager::Manager were rewritten to not need any
    shared global state anymore, various corner cases and crashes on
    destruction are not happening anymore. In particular, it's now also
    possible to have two instances of the same manager type without the two
    interfering with each other in any way.

@subsection corrade-changelog-2020-06-documentation Documentation

-   Various fixes and clarifications (see
    [mosra/corrade#80](https://github.com/mosra/corrade/pull/80),
    [mosra/magnum#418](https://github.com/mosra/magnum/pull/418))

@subsection corrade-changelog-2020-06-deprecated Deprecated APIs

-   @cpp Utility::Directory::map(const std::string&, std::size_t) @ce is
    deprecated and renamed to @cpp Utility::Directory::mapWrite() @ce as it
    doesn't preserve original file contents and thus can't be used for
    read-write access
-   The internal @cpp CORRADE_BIG_ENDIAN @ce macro got renamed to
    @ref CORRADE_TARGET_BIG_ENDIAN and made public. The old variant is still
    present for backwards compatibility, but will be removed in the future.

@subsection corrade-changelog-2020-06-compatibility Potential compatibility breakages, removed APIs

-   @ref CORRADE_ASSERT_UNREACHABLE() now accepts a message and will fail to
    compile when used with an empty argument list. The original functionality
    is provided by @ref CORRADE_INTERNAL_ASSERT_UNREACHABLE() instead.
-   @ref Containers::Array and @ref Containers::StaticArray was switched to
    do the @cpp Containers::ValueInit @ce construction by default instead of
    @cpp Containers::DefaultInit @ce, i.e. zero-initializing trivial types
    instead of keeping them uninitialized. Apart from introducing potential
    slowdowns due to the additional zero-ininitialization this isn't really
    breaking, just makes the default safer; and you still have the option to
    choose a different initialization.
-   @ref Utility::Debug and @ref Utility::format() now prints @cpp long double @ce
    with 15 significant digits instead of 18 on platforms where it is 64-bit
    instead of 80-bit
-   @ref Utility::Endianness is now a namespace, similarly to the change done
    to @cpp Utility::Directory @ce or @ref Utility::String in 2018.02. The API
    doesn't change apart from that, but code previously doing
    @cpp using Utility::Endianness @ce needs to be changed to
    @cpp using namespace Utility::Endianness @ce to compile again.
-   Removed `Corrade/Utility/AndroidStreamBuffer.h` that was deprecated in
    2018.04, use @ref Corrade/Utility/AndroidLogStreamBuffer.h instead
-   Removed `PluginManager::Manager::instance()` that was deprecated in
    2018.04, use @ref PluginManager::Manager::instantiate() instead

@section corrade-changelog-2019-10 2019.10

Released 2019-10-24, tagged as
[v2019.10](https://github.com/mosra/corrade/releases/tag/v2019.10).

@subsection corrade-changelog-2019-10-dependencies Dependency changes

-   Minimal supported CMake version is now 3.4. Older versions are not
    supported anymore and all workarounds for them were removed. Download a
    prebuilt release of a newer version if you need to use Corrade on older
    systems (such as Ubuntu 14.04 or Debian 8). This is a conservative change
    that shouldn't affect any additional distribution compared to the CMake 3.1
    requirement in 2019.01.

@subsection corrade-changelog-2019-10-new New features

-   MSVC 2019 support. It needs about the same set of workarounds as MSVC 2017,
    which means there's a new (automatically enabled) `MSVC2019_COMPATIBILITY`
    CMake option, exposed further as `CORRADE_MSVC2019_COMPATIBILITY` CMake
    variable and preprocessor macro. See also
    [mosra/magnum-bootstrap#18](https://github.com/mosra/magnum-bootstrap/issues/18)
    and [mosra/magnum#343](https://github.com/mosra/magnum/pull/343).
-   New @ref main "Corrade::Main" library for improved user experience and
    consistent behavior on Windows platforms (see
    [mosra/corrade#37](https://github.com/mosra/corrade/pull/37) and
    [mosra/magnum#98](https://github.com/mosra/magnum/issues/98))
-   When using Corrade as a CMake subproject, it now puts all binaries into a
    common directory to simplify `PATH` handling and dynamic plugin loading.
    For more information see @ref corrade-cmake-subproject,
    [mosra/magnum#357](https://github.com/mosra/magnum/issues/357) and
    [mosra/magnum-plugins#63](https://github.com/mosra/magnum-plugins/issues/63).
-   Added @ref CORRADE_TARGET_POWERPC for detecting PowerPC architectures (see
    [mosra/corrade#60](https://github.com/mosra/corrade/pull/60))
-   New set of @ref CORRADE_TARGET_LIBCXX, @ref CORRADE_TARGET_LIBSTDCXX and
    @ref CORRADE_TARGET_DINKUMWARE macros to detect the common STL
    implementations
-   New @ref CORRADE_BUILD_MULTITHREADED build-time option, moved from Magnum

@subsubsection corrade-changelog-2019-10-new-containers Containers library

-   The @ref Containers::ArrayView, @ref Containers::StaticArrayView,
    @ref Containers::StridedArrayView, @ref Containers::Array and
    @ref Containers::StaticArray classes are now available as single-header
    libraries for easier integration into your projects. See
    @ref corrade-singles for more information.
-   Opt-in STL compatibility for @ref Containers::ArrayView,
    @ref Containers::StaticArrayView and @ref Containers::StridedArrayView
    classes, allowing them to be implicitly converted from @ref std::vector and
    @ref std::array (see also [mosra/corrade#75](https://github.com/mosra/corrade/issues/75))
-   Opt-in STL compatibility for @ref Containers::Array,
    @ref Containers::ArrayView, @ref Containers::StaticArray,
    @ref Containers::StaticArrayView and @ref Containers::StridedArrayView
    allowing them to be implicitly converted to/from C++2a @ref std::span
-   @ref Containers::StridedArrayView is now multi-dimensional with a
    possibility of negative and zero strides, making it usable in a broader
    range of use-cases
-   Added convenience @ref Containers::stridedArrayView() "make functions",
    similar to existing @ref Containers::arrayView() and
    @ref Containers::staticArrayView()
-   Added compile-time-sized @ref Containers::StaticArrayView::suffix() and
    @ref Containers::StaticArray::suffix() variants
-   Added @ref Containers::ArrayView::slice() const,
    @ref Containers::StaticArrayView::slice() const,
    @ref Containers::Array::slice() const and @ref Containers::StaticArray::slice() const variants that take both being and
    end offsets at compile time (and thus also more range checking at compile
    time)
-   Added @cpp Containers::ArrayView::except() @ce and similar APIs to
    @ref Containers::StaticArrayView, @ref Containers::Array,
    @ref Containers::StaticArray and @ref Containers::StridedArrayView. It's
    like @ref Containers::ArrayView::prefix() but taking a count of items to
    exclude from the end instead of how much to include from the beginning.
-   Added a @ref Containers::ArrayView<void> specialization as a mutable
    type-erased counterpart to @ref Containers::ArrayView<const void>

@subsubsection corrade-changelog-2019-10-new-pluginmanager PluginManager library

-   Added a @ref CORRADE_PLUGIN_EJECT() macro doing an inverse of
    @ref CORRADE_PLUGIN_IMPORT() for static plugins, useful mainly for testing
    purposes

@subsubsection corrade-changelog-2019-10-new-testsuite TestSuite library

-   Custom @ref TestSuite comparators can now optionally save diagnostic files
    as well as print formatted messages to the output. See
    @ref TestSuite-Tester-save-diagnostic for more information.
-   Added @ref TestSuite::Tester::setTestCaseTemplateName() for convenient
    distinction of different specializations of templated test cases
-   @ref TestSuite::Tester now warns when dynamic CPU scaling is used on Linux
    and benchmarks are being run, as that makes the measurements rather noisy.
    With the `--verbose` command-line option it prints further information.

@subsubsection corrade-changelog-2019-10-new-utility Utility library

-   @ref Utility::Debug::packed and @ref Utility::Debug::color output modifiers
    for tighter printing of container types and printing color-like values as
    actual 24bit ANSI color sequences
-   New @cpp Utility::Directory::append() @ce and
    @cpp Utility::Directory::appendString() @ce counterparts to
    @cpp Utility::Directory::write() @ce
-   New @cpp Utility::Directory::copy() @ce utility for zero-allocation file
    copies.
-   New @cpp Utility::Directory::join(std::initializer_list<std::string>) @ce
    overload for joining a path from multiple parts at once
-   New @cpp Utility::Directory::current() @ce utility for getting current
    working directory
-   New @cpp Utility::Directory::isDirectory() @ce utility for distinguishing
    between files and directories
-   @cpp Utility::Directory::libraryLocation() @ce as a counterpart to
    @cpp Utility::Directory::executableLocation() @ce
-   @cpp Utility::Directory::splitExtension() @ce as a complement to
    @cpp Utility::Directory::path() @ce and @cpp Utility::Directory::filename() @ce
-   New @ref Corrade/Utility/StlForwardArray.h,
    @ref Corrade/Utility/StlForwardString.h,
    @ref Corrade/Utility/StlForwardTuple.h and
    @ref Corrade/Utility/StlForwardVector.h headers providing lightweight
    forward declarations for @ref std::array, @ref std::string, @ref std::tuple
    and @ref std::vector on platforms that have them (and including the full
    definition otherwise). These are also available as single-header libraries
    for easier integration into your projects. See @ref corrade-singles for
    more information.
-   New @ref Corrade/Utility/StlMath.h header providing bloat-free
    @cpp #include <cmath> @ce on C++17 an up. This header is also available as
    a single-header library for easier integration into your projects. See
    @ref corrade-singles for more information.
-   New @ref Utility::IsStringLike type trait
-   Added @ref Utility::format(), an alternative to @ref Utility::formatString()
    returning @ref Containers::Array instead of @ref std::string
-   @ref Utility::Debug scoped output redirection and coloring is now done
    thread-local by default (see
    [mosra/corrade#66](https://github.com/mosra/corrade/pull/66))
-   Added @ref Utility::Debug::defaultOutput(),
    @ref Utility::Warning::defaultOutput() and
    @ref Utility::Error::defaultOutput() for easy redirection back to the
    default output
-   @ref Utility::Arguments is now able to ignore unknown options in the
    prefixed variant
-   Added @ref Utility::Arguments::addFinalOptionalArgument(), combining the
    best of arguments and options together in one wonderful feature
-   @ref Utility::FileWatcher learned to optionally ignore stat errors (for
    example if the file is missing) and to optionally not signal a change if
    the file is empty; @ref Utility::Tweakable is using these features for more
    robustness
-   Added @ref Utility::String::partition() and @ref Utility::String::rpartition() "rpartition()",
    equivalent to Python's @cb{.py} str.partition() @ce
-   New @ref CORRADE_FUNCTION utility macro for a portable C++11 @cpp __func__ @ce
-   New @ref CORRADE_LINE_STRING utility macro for a stringified @cpp __LINE__ @ce
-   New @ref CORRADE_THREAD_LOCAL macro for a portable @cpp thread_local @ce
    annotation
-   New @ref CORRADE_ALWAYS_INLINE and @ref CORRADE_NEVER_INLINE annotations
    for easier overriding of optimizer behavior
-   New @ref CORRADE_VISIBILITY_INLINE_MEMBER_EXPORT visibility macro to aid
    codebases compiled with `-fvisibility-inlines-hidden`; the
    @ref CORRADE_VISIBILITY_EXPORT and friends are now also properly documented
-   Added a @ref CORRADE_NOOP() macro for a portable way to define out function
    macros on compiler command line.

@subsection corrade-changelog-2019-10-changes Changes and improvements

-   Global state used by @ref PluginManager::Manager, @ref Utility::Debug and
    @ref Utility::Resource internals is no longer duplicated when Corrade is
    built statically and linked to more than one dynamic library or executable.
    This works on all platforms except for Python bindings on Windows at the
    moment, where the workaround is to build Corrade dynamically.
-   @ref PluginManager::Manager and @ref Utility::Debug now have the global
    state thread-local when the @ref CORRADE_BUILD_MULTITHREADED option is
    enabled (see also [mosra/corrade#65](https://github.com/mosra/corrade/issues/65))

@subsubsection corrade-changelog-2019-10-changes-containers Containers library

-   It's now possible to create @ref Containers::ScopeGuard without a handle
    in order to easily call a global function or lambda on scope end
-   Implicit memory management of @ref Containers::LinkedList can be now
    overridden by reimplementing @ref Containers::LinkedListItem::erase()
-   The @ref CORRADE_ENUMSET_FRIEND_OPERATORS() macro now works with templated
    classes and doesn't need a corresponding @ref CORRADE_ENUMSET_OPERATORS()
    to be present anymore
-   @ref Containers::StaticArray is now copyable and movable if the underlying
    type is copyable / movable as well, to make it useful in more use cases.
    Note that currently, same as with @ref Containers::Optional,
    @ref std::is_copy_constructible etc. don't properly report @cpp false @ce
    for non-copyable / non-movable types. That'll get fixed in a future
    release.

@subsubsection corrade-changelog-2019-10-changes-Interconnect Interconnect library

-   The @ref Interconnect library internals got reworked with less allocations,
    better memory usage, improved signal emitting performance and support for
    connecting to arbitrary function objects along with @ref std::function. See
    also [mosra/corrade#63](https://github.com/mosra/corrade/pull/63) for more
    information.

@subsubsection corrade-changelog-2019-10-changes-pluginmanager PluginManager library

-   Instantiating a @ref PluginManager::Manager without an explicit plugin
    directory will only print a warning about no dynamic plugins found if
    there's no statically linked plugin either. That makes it behave better on
    setups where all plugins are always linked statically.
-   @ref PluginManager::Manager now explicitly checks for presence of a
    plugin metadata file for dynamic plugins and fails with
    @ref PluginManager::LoadState::WrongMetadataFile if it's not found.
    Previously it was silently ignoring missing metadata files, often resulting
    in a runtime linker error due to a dependency not being loaded.
-   @ref CORRADE_PLUGIN_REGISTER() now operates completely without heap access,
    making it safe to run in restricted phases of application execution
-   @ref PluginManager::AbstractPlugin now implements a destructive move
    constructor

@subsubsection corrade-changelog-2019-10-changes-testsuite TestSuite library

-   When a test executed through CTest fails on Android, the uploaded test
    executable is kept in `/data/local/tmp` so it's possible to debug it
    manually later. See the @ref TestSuite-Tester-running-cmake "Android testing docs"
    for more information.
-   Android tests ran through CTest have stderr redirected to stdout because
    otherwise the `adb` bridge causes them to be extremely out-of-sync
-   @ref TestSuite::Tester::testCaseId(),
    @ref TestSuite::Tester::testCaseInstanceId() and
    @ref TestSuite::Tester::testCaseRepeatId() are now expected to be called
    only from within actual (instanced, repeated) test cases instead of
    silently giving back an undefined value, making mistakes harder to spot

@subsubsection corrade-changelog-2019-10-changes-utility Utility library

-   Assertion messages now ignore @ref Utility::Error output redirection to
    ensure the application never aborts without a message
-   @ref Utility::Debug output behavior can be now configured using new
    @ref Utility::Debug::setFlags() and @ref Utility::Debug::setImmediateFlags()
    in addition to output modifiers such as @ref Utility::Debug::nospace
-   @ref Utility::Debug prints nested containers separated with a newline for
    more readable output
-   @ref CORRADE_ASSERT_UNREACHABLE() now compiles into a compiler builtin on
    MSVC as well
-   @ref Utility::format() now prints @cpp enum @ce values implicitly
    convertible to integers as integers without requiring the user to do an
    explicit cast first
-   @ref Utility::Configuration internals were rewritten to not use exceptions
    anymore
-   The @ref CORRADE_AUTOMATIC_INITIALIZER() and
    @ref CORRADE_AUTOMATIC_FINALIZER() macros can now be overridden for testing
    purposes or when global constructors / destructors are not desired.
-   @ref Utility::Resource internals now operate completely without heap
    access, its APIs now also have overloads taking plain C string literals
    instead of @ref std::string
-   @ref Utility::String::join() and
    @ref Utility::String::joinWithoutEmptyParts() overloads taking a
    @cb{.cpp} char @ce array and a @ref std::string for the delimiter in
    addition to a single @cb{.cpp} char @ce

@subsection corrade-changelog-2019-10-buildsystem Build system

-   @ref building-corrade-packages-msys "MSYS2 packages" are now in official
    repositories, installable directly via `pacman`
-   The @ref CORRADE_CXX_STANDARD preprocessor macro learned support for the
    upcoming C++2a standard. The equivalent CMake property can now be set to
    @cpp 20 @ce to pass the `-std=c++2a` flag to GCC and Clang and
    `/std:c++latest` to MSVC.
-   It's now possible to use the @ref TestSuite library via CMake subprojects
    also on Android, iOS and Emscripten
-   Explicitly disabling a MSVC linker optimization that causes seemingly
    similar signals to be conflated together, causing erratic behavior. This is
    done automatically for CMake-based projects, see the
    @ref Interconnect-Emitter-msvc-icf "Interconnect::Emitter" documentation
    for more information when using custom buildsystems, see also
    [mosra/corrade#51](https://github.com/mosra/corrade/issues/51).
-   Fixed compilation with Clang and `-std=gnu++14` (see [mosra/corrade#62](https://github.com/mosra/corrade/pull/62))
-   @ref CORRADE_VISIBILITY_STATIC no longer exports symbols in static
    libraries to be consistent with hidden visibility by default, additionally
    `-fvisibility-inlines-hidden` is passed along with `-fvisibility=hidden`
    when @ref corrade-cmake "CORRADE_USE_PEDANTIC_FLAGS" property is enabled in
    CMake on GCC and Clang to avoid linker warnings on macOS (see
    [mosra/corrade#53](https://github.com/mosra/corrade/issues/53))
-   The Emscripten CMake toolchain now sets the `EMSCRIPTEN` variable to help
    3rd party projects (see [mosra/toolchains#7](https://github.com/mosra/toolchains/pull/7))
-   The Emscripten CMake toolchain now looks for `emcc` on @cb{.sh} $PATH @ce
    as a last resort and then uses the parent directory as `EMSCRIPTEN_PREFIX`
    (see [mosra/toolchains#8](https://github.com/mosra/toolchains/pull/8))
-   On Windows, if the Emscripten toolchain detects Visual Studio being used
    as a generator, it'll fail with an error suggesting to use a different
    generator instead. Previously, CMake silently fell back to using Visual
    Studio as a C++ compiler, resulting in seemingly impossible errors. See
    [mosra/corrade#78](https://github.com/mosra/corrade/issues/78).
-   Clarified interaction of `-fvisibility-inlines-hidden` and/or
    `-Wl,-Bsymbolic-functions` GCC/Clang flags and @ref Interconnect::Emitter
-   The @ref TestSuite library and all tests created with
    @ref corrade-cmake-add-test "corrade_add_test()" are now built with
    `-s DISABLE_EXCEPTION_CATCHING=0` being explicitly specified both for the
    compiler and linker to work correctly on Emscripten 1.38.36 and newer
-   Emscripten builds now have the `-fPIC` option disabled by default as it
    causes linker errors related to `__memory_base` on 1.38.36 (see also
    [emscripten-core/emscripten#8761](https://github.com/emscripten-core/emscripten/issues/8761))
-   Fixed dynamic plugin metadata location when `CMAKE_LIBRARY_OUTPUT_DIRECTORY`
    is set (see [mosra/corrade#74](https://github.com/mosra/corrade/pull/74))
-   With CMake 3.15 there's an unfortunate collision between
    `CORRADE_CXX_STANDARD` and CMake's own `COMPILE_FEATURES` target property,
    where a request to use C++14 from a 3rd party library would get ignored
    with C++11 being used instead. To fix that, the `CORRADE_CXX_STANDARD`
    property does nothing if the `COMPILE_FEATURES` property is set on the
    target as well. See @ref corrade-cmake for more information.
-   Fixed @ref corrade-cmake-add-test "corrade_add_test()" when library output
    path is set in CMake (see [mosra/corrade#77](https://github.com/mosra/corrade/pull/77))
-   Plugin metadata are now copied next to the binary as a post-build command
    instead of only during a full build
-   Updated the iOS toolchain to make @cmake find_package(Threads) @ce work
    correctly

@subsection corrade-changelog-2019-10-bugfixes Bug fixes

-   The @ref TestSuite::Comparator class by mistake did not have fuzzy
    comparison for @cpp long double @ce
-   Fixed @ref TestSuite::Compare::around() for types that don't have a total
    ordering (for example, for Magnum matrix and vector types, @cpp !(a < b) @ce
    might not necessarily imply that @cpp a >= b @ce).
-   Fixed build on big-endian platforms (see
    [mosra/corrade#58](https://github.com/mosra/corrade/pull/58))
-   Fixed @ref Utility::Sha1 calculation on big-endian platforms (see
    [mosra/corrade#60](https://github.com/mosra/corrade/pull/60))
-   Fixed @cpp Utility::Directory::read() @ce to not use `ftello()` on 32-bit
    Android and API levels below 24
-   Fixed @cpp Utility::Directory::read() @ce to work with files that report an
    early EOF (such as stuff from `/sys` on Linux)
-   Fixed @ref Interconnect::Emitter::emit() for signals from
    multiply-inherited base classes on MSVC --- it was due to an insufficiently
    tested workaround for a template deduction limitation in the compiler (see
    [mosra/corrade#51](https://github.com/mosra/corrade/issues/51))
-   @ref Interconnect::Emitter::emit() now works correctly on MSVC for signals
    from classes where multiple and/or virtual inheritance is involved (see
    [mosra/corrade#51](https://github.com/mosra/corrade/issues/51))
-   Fixed @ref CORRADE_COMPARE_WITH() to be callable with expressions such as
    @cpp *comparator @ce
-   Fixed @ref Utility::Tweakable to work correctly with buildsystems using
    absolute paths for `__FILE__` macros (such as Makefiles, Ninja is using
    relative paths). See [mosra/corrade#61](https://github.com/mosra/corrade/issues/61).
-   In some corner cases, automatic registering / unregistering of
    @ref Utility::Resource data happens more than once. While this was allowed
    for registration, the unregistration caused an assert to be fired. Fixed
    this to be allowed on both.
-   @cpp Utility::Directory::copy() @ce wasn't properly freeing both opened
    files if one of them failed to open (see [mosra/corrade#70](https://github.com/mosra/corrade/pull/70))
-   @ref Interconnect::Emitter::emit() (and signal/slot connections in general)
    now work correctly with non-copyable arguments
-   Fixed @ref Utility::Debug::isTty() (and thus also @ref TestSuite colored
    output) to reliably work on macOS. Because Xcode output window doesn't
    support ANSI color escape codes, tt was relying on an undocumented
    @cb{.sh} $XPC_SERVICE_NAME @ce variable that was always defined inside
    Xcode to disable colored output. Nowadays this variable is sometimes
    defined outside as well, making the check unreliable. Fixed by testing for
    @cb{.sh} $TERM @ce instead, see
    [mosra/corrade#73](https://github.com/mosra/corrade/issues/73) for more
    information.

@subsection corrade-changelog-2019-10-deprecated Deprecated APIs

-   Single-argument @cpp Utility::Arguments::setHelp() @ce is now deprecated in
    favor of @ref Utility::Arguments::setGlobalHelp() to avoid it being used
    for documenting named arguments by accident.
-   @cpp Utility::Directory::fileExists() @ce is now deprecated in favor of
    @cpp Utility::Directory::exists() @ce. It was named like this to prevent it
    from looking like it works on directories only, but such name then caused
    people to ask if it works on directories as well, not helping anything.
-   `Interconnect::Connection::isConnected()` and
    `Interconnect::Connection::disconnect()` are deprecated and print a warning
    at runtime as the redesigned internals of the @ref Interconnect library now
    make it impossible to check that the original @ref Interconnect::Emitter
    object still exists. Use @ref Interconnect::Emitter::isConnected() and
    @ref Interconnect::disconnect() instead.
-   Re-connecting a disconnected signal using
    `Interconnect::Connection::isConnectionPossible()` and
    `Interconnect::Connection::connect()` is not possible anymore in order
    to make the @ref Interconnect library more efficient. These two functions
    are now deprecated and just returningthe value of (also deprecated)
    `isConnected()`.
-   Signatures of @ref TestSuite::Comparator methods were changed in order to
    support new features. The old variant with
    @ref TestSuite::Comparator::operator()() "operator()()" returning a
    @cpp bool @ce and @cpp printErrorMessage() @ce instead of
    @ref TestSuite::Comparator::printMessage() "printMessage()" is still
    supported for backwards compatibility but custom comparators are strongly
    advised to upgrade

@subsection corrade-changelog-2019-10-compatibility Potential compatibility breakages, removed APIs

-   @cpp Containers::StridedArrayView<T> @ce is now
    @ref Containers::StridedArrayView "Containers::StridedArrayView<dimensions, T>"
    and all code that was using it directly before needs to be changed to use
    @ref Containers::StridedArrayView1D<T> instead; the constructor is also
    changed to take a linear array view in addition for better bounds checking
-   Support for @ref std::tuple and @ref std::string in
    @ref Utility::Debug is now provided through a separate header,
    @ref Corrade/Utility/DebugStl.h, to speed up compile times. Since including
    it for backwards compatibility would practically revert the optimization,
    you have to @cpp #include @ce it explicitly where needed.
-   @ref Utility::formatString(), @ref Utility::formatInto() taking a
    @ref std::string and support for formatting @ref std::string through the
    @ref Utility::format() family of APIs is now provided through a separate
    header, @ref Corrade/Utility/FormatStl.h, to speed up compile times. Since
    including it for backwards compatibility would practically revert the
    optimization, you have to @cpp #include @ce it explicitly where needed.
-   @ref TestSuite::Compare::SortedContainer was split from the
    @ref Corrade/TestSuite/Compare/Container.h header into
    @ref Corrade/TestSuite/Compare/SortedContainer.h to isolate the heavy
    `<algorithm>` include. Backwards compatibility is not provided in order to
    reduce compile times, please include the new header now.
-   The @ref CORRADE_ENUMSET_FRIEND_OPERATORS() macro now provides both
    declarations and definitions of enum set operators. This means it has to be
    used alone, without @ref CORRADE_ENUMSET_OPERATORS(), as that would lead to
    duplicate definitions.
-   The `CORRADE_BENCHMARK`, `CORRADE_BENCHMARK_DISCARD`,
    `CORRADE_BENCHMARK_YELLOW` and `CORRADE_BENCHMARK_RED` environment
    variables used by @ref TestSuite::Tester were renamed to
    `CORRADE_TEST_BENCHMARK`, `CORRADE_TEST_BENCHMARK_DISCARD`,
    `CORRADE_TEST_BENCHMARK_YELLOW` and `CORRADE_TEST_BENCHMARK_RED` to be
    consistent with remaining variables understood by test suite executables.

@subsection corrade-changelog-2019-10-documentation Documentation

-   Updated docs of the @ref Corrade/Utility/Macros.h header mentioning what
    @ref CORRADE_DEPRECATED() macros work on what compiler (see
    [mosra/corrade#46](https://github.com/mosra/corrade/issues/46))
-   Fixed Gentoo build instructions (see
    [mosra/corrade#64](https://github.com/mosra/corrade/pull/64))
-   Various other doc updates (see
    [mosra/corrade#69](https://github.com/mosra/corrade/pull/69),
    [mosra/corrade#71](https://github.com/mosra/corrade/pull/71) and
    [mosra/corrade#76](https://github.com/mosra/corrade/pull/76))

@section corrade-changelog-2019-01 2019.01

Released 2019-02-04, tagged as
[v2019.01](https://github.com/mosra/corrade/releases/tag/v2019.01).

@subsection corrade-changelog-2019-01-dependencies Dependency changes

-   Minimal supported GCC version is now 4.8.1, GCC 4.7 is not supported
    anymore. Minimal Clang version is now 3.3, since that's the first version
    with a complete C++11 support. See also
    [mosra/magnum#274](https://github.com/mosra/magnum/issues/274).
-   Minimal supported CMake version is now 3.1. Older versions are not
    supported anymore and all workarounds for them were removed. Download a
    prebuilt release of a newer version if you need to use Corrade on older
    systems (such as Ubuntu 14.04 or Debian 8). See also
    [mosra/magnum#274](https://github.com/mosra/magnum/issues/274).

@subsection corrade-changelog-2019-01-new New features

-   Various Corrade features are now being available also as single-header
    libraries for easier integration into your projects. See
    @ref corrade-singles for more information.

@subsubsection corrade-changelog-2019-01-new-containers Containers library

-   New @ref Containers::Pointer class, a lightweight equivalent to
    @ref std::unique_ptr
-   New @ref Containers::Reference class, a lightweight equivalent to
    @ref std::reference_wrapper
-   New @cpp Containers::NoCreate @ce tag for constructing instances
    equivalent to a moved-from state. This tag was used in Magnum already,
    moving it here to make it available to a wider set of APIs.
-   New @ref Containers::optional(Args&&... args) overload for in-place
    initialization
-   Added r-value overloads to @ref Containers::Optional::operator*() allowing
    you to easily take the value out of a r-value optional
-   Opt-in STL compatibility for @ref Containers::Optional, allowing for
    explicit conversion from and to @ref std::optional in C++17
-   New @ref Containers::arrayCast(const StridedArrayView<dimensions, T>&) "Containers::arrayCast(StridedArrayView<T>)"
    overload for casting strided array views

@subsubsection corrade-changelog-2019-01-new-utility Utility library

-   Asserts from the @ref Corrade/Utility/Assert.h can now use the standard
    @cpp assert() @ce if @ref CORRADE_STANDARD_ASSERT is defined
-   It's now possible to provide custom implementation for any assertion macro
    from @ref Corrade/Utility/Assert.h by placing a @cpp #define @ce before
    including the header
-   Initial implementation of a @ref Utility::FileWatcher utility for
    monitoring changes to a file (see also [mosra/corrade#54](https://github.com/mosra/corrade/issues/54))
-   New @ref Utility::Tweakable class, implementing tweakable constants for
    hot-reload
-   Added @ref Utility::print() and @ref Utility::printError() convenience
    functions for @ref Utility::formatInto()
-   It's now possible to print @ref std::nullptr_t with @ref Utility::Debug

@subsection corrade-changelog-2019-01-changes Changes and improvements

-   The @ref CORRADE_CXX_STANDARD macro has been moved to the top-level
    @ref Corrade/Corrade.h from @ref Corrade/Utility/Macros.h so it's available
    everywhere unconditionally

@subsubsection corrade-changelog-2019-01-changes-containers Containers library

-   The @ref Containers::StridedArrayView class is now @cpp constexpr @ce,
    allowing it to be used to describe data layout at compile-time
-   The @ref Containers::ArrayView::end() "end()" and
    @ref Containers::ArrayView::cend() "cend()" APIs in
    @ref Containers::ArrayView and @ref Containers::StaticArrayView are now
    @cpp constexpr @ce the same way @ref Containers::ArrayView::begin() "begin()"
    / @ref Containers::ArrayView::cbegin() "cbegin()" is
-   Slicing APIs in @ref Containers::ArrayView and
    @ref Containers::StaticArrayView are now @cpp constexpr @ce
-   Bounds checking in compile-time-sized
    @ref Containers::StaticArray::prefix() and
    @ref Containers::StaticArrayView::prefix() is now done at compile time as
    well
-   The "initializer list" @ref Containers::StaticArray::StaticArray(Args&&... args)
    constructor is now implicit instead of explicit for easier use

@subsubsection corrade-changelog-2019-01-changes-pluginmanager PluginManager library

-   The @ref PluginManager::Manager::instantiate() and
    @ref PluginManager::Manager::loadAndInstantiate() functions now return
    @ref Containers::Pointer instead of @ref std::unique_ptr for improved
    compile times
-   Plugin interfaces now have the
    @ref PluginManager::AbstractPlugin::pluginInterface() "pluginInterface()"
    function optional to make implementing hot-reload interfaces less verbose

@subsubsection corrade-changelog-2019-01-changes-utility Utility library

-   Prefixed or prefix-ignoring @ref Utility::Arguments now work better with
    3rd party argument parsers which may be less restrictive about argument
    name format; arguments that are ignored are not checked for key validity
    anymore (see [mosra/magnum#305](https://github.com/mosra/magnum/issues/305))

@subsection corrade-changelog-2019-01-buildsystem Build system

-   Corrade now has a [Conan](https://conan.io/) package. See
    @ref building-corrade-packages-conan for more information. See also
    [mosra/corrade#57](https://github.com/mosra/corrade/pull/57).
-   Corrade is now available through [Hunter](https://hunter.sh) CMake-driven
    package manager. See @ref building-corrade-packages-hunter for more
    information. See also [mosra/magnum#298](https://github.com/mosra/magnum/pull/298).
-   The `package/msys` directory now contains `PKGBUILD`s for
    [MSYS2](https://www.msys2.org/). See @ref building-corrade-packages-msys
    for more information. See also [mosra/corrade#56](https://github.com/mosra/corrade/pull/56).

@subsection corrade-changelog-2019-01-bugfixes Bug fixes

-   It was not possible to use @ref TestSuite::Compare::File with
    @ref CORRADE_COMPARE_WITH() because its symbols were not exported by
    mistake
-   The `FILES` section in @ref corrade-cmake-add-test "corrade_add_test()" was
    mistakenly ignored everywhere except Android and Emscripten, making
    cross-platform testing more prone to errors. Now `ctest` properly fails
    when the `FILES` section contains a file that doesn't exist.
-   The @ref Containers::ArrayView::operator bool() and
    @ref Containers::StaticArrayView::operator bool() operators were not
    @cpp constexpr @ce by accident

@subsection corrade-changelog-2019-01-deprecated Deprecated APIs

-   @cpp Containers::ScopedExit @ce is deprecated, use
    @ref Containers::ScopeGuard instead
-   All uses of @ref std::unique_ptr are replaced with @ref Containers::Pointer
    (affecting mainly the @ref PluginManager::Manager class). The types are
    implicitly move-convertible to each other if the
    @ref Corrade/Containers/PointerStl.h header is included. The header is
    included where needed if @ref CORRADE_BUILD_DEPRECATED is enabled. To
    ensure your code keeps with future versions of Magnum, either switch your
    code to use @ref Containers::Pointer as well or include the
    @ref Corrade/Containers/PointerStl.h header explicitly.

@subsection corrade-changelog-2019-01-compatibility Potential compatibility breakages, removed APIs

-   Removed @cpp Containers::ArrayReference @ce, which was deprecated since 2015.
    Use @ref Containers::ArrayView instead.
-   Removed @cpp Containers::Array::zeroInitialized() @ce and
    @cpp Containers::Array::from() @ce, which were deprecated since 2015. Use
    @ref Containers::Array::Array(ValueInitT, std::size_t) and
    @ref Containers::Array::Array(InPlaceInitT, std::initializer_list<T>)
    instead.
-   Removed @cpp Utility::Arguments::setHelpKey() @ce, which was deprecated
    since 2016. Its functionality was merged into
    @ref Utility::Arguments::setHelp().
-   Removed @cpp Utility::Debug::setOutput() @ce, which was deprecated since
    2016 and superseded by @ref Utility::Debug scoped output
-   Removed @cpp Utility::Debug::noNewlineAtTheEnd() @ce, which was deprecated
    since 2016 and superseded by @ref Utility::Debug::Flag::NoNewlineAtTheEnd
-   Removed @cpp Utility::sleep() @ce which was deprecated since 2016. Use
    @ref Utility::System::sleep() instead.
-   Removed @cpp TestSuite::Tester::BenchmarkType::WallClock @ce,
    @cpp TestSuite::Tester::BenchmarkUnits::Time @ce and
    @cpp TestSuite::Tester::BenchmarkUnits::Memory @ce which were deprecated
    since January 2017, not long after introducing the benchmark functionality
    itself. Use @ref TestSuite::Tester::BenchmarkType::WallTime,
    @ref TestSuite::Tester::BenchmarkUnits::Nanoseconds and
    @ref TestSuite::Tester::BenchmarkUnits::Bytes instead.
-   Removed `CORRADE_*_LIBRARIES` and `CORRADE_*_INCLUDE_DIRS` CMake variables,
    which were deprecated in favor of `Corrade::*` imported targets in 2016.
    The deprecated `CORRADE_CXX_FLAGS` variable is still present, however.

@subsection corrade-changelog-2019-01-documentation Documentation

-   The user-definable macros @ref CORRADE_NO_ASSERT and
    @ref CORRADE_GRACEFUL_ASSERT now have dedicated documentation, instead of
    being casually mentioned on various places and impossible to search for.

@section corrade-changelog-2018-10 2018.10

Released 2018-10-23, tagged as
[v2018.10](https://github.com/mosra/corrade/releases/tag/v2018.10).

@subsection corrade-changelog-2018-10-new New features

@subsubsection corrade-changelog-2018-10-new-containers Containers library

-   New @cpp Containers::ScopedExit @ce helper class
-   New @ref Containers::StridedArrayView class for providing access to
    interleaved data
-   New @ref Containers::ArrayView::front() "front()" and
    @ref Containers::ArrayView::back() "back()" accessors for all array and
    array view types
-   Added @ref Containers::Optional::operator=(NullOptT) for resetting an
    optional value without requiring the type to be movable
-   Added fixed-size @ref Containers::ArrayView::prefix() const "prefix()"
    overload to all Array classes

@subsubsection corrade-changelog-2018-10-new-pluginmanager PluginManager library

-   Ability to change plugin-specific configuration globally using
    @ref PluginManager::PluginMetadata::configuration() --- compared to
    modifying instance-specific configuration through
    @ref PluginManager::AbstractPlugin::configuration(), this can be done even
    before a plugin is loaded and affects all plugin instances loaded later
    through the same manager

@subsubsection corrade-changelog-2018-10-new-utility Utility library

-   New @ref Utility::formatString() and @ref Utility::formatInto() functions
    for Python-style zero-allocation string formatting
-   Added @ref Utility::Arguments::prefix(), @ref Utility::Arguments::isParsed()
-   New @cpp Utility::String::viewBeginsWith() @ce and
    @cpp Utility::String::viewEndsWith() @ce utilities that take
    @ref Containers::ArrayView instead of @ref std::string as a first parameter
-   New @ref Utility::String::replaceFirst() and
    @ref Utility::String::replaceAll() utilities for replacing substrings

@subsection corrade-changelog-2018-10-changes Changes and improvements

@subsubsection corrade-changelog-2018-10-changes-containers Containers library

-   It's no longer a compile error to call @ref Containers::arrayView() /
    @ref Containers::staticArrayView() on a type that's already an
    @ref Containers::ArrayView / @ref Containers::StaticArrayView

@subsubsection corrade-changelog-2018-10-changes-pluginmanager PluginManager library

-   Plugins are now loaded from the filesystem in an alphabetical order for
    predictable behavior across different systems

@subsubsection corrade-changelog-2018-10-changes-testsuite TestSuite library

-   Adapted Emscripten test runner markup for consistency with the
    [m.css](http://mcss.mosra.cz) theme used in [Magnum](https://magnum.graphics)
-   It's now possible to have non-copyable and non-moveable
    @ref TestSuite::Comparator specializations

@subsubsection corrade-changelog-2018-10-changes-utility Utility library

-   @ref Utility::Arguments::value() and @ref Utility::Arguments::isSet() now
    check that the arguments were already successfully parsed to prevent
    accidentally forgotten calls to @ref Utility::Arguments::parse()
-   @ref Utility::Arguments is now move-only to avoid accidental copies ---
    it's not meant to be used as a general storage for parsed arguments, only a
    parser
-   @ref Utility::String::stripPrefix() and @ref Utility::String::stripSuffix()
    have now zero-allocation implementation

@subsection corrade-changelog-2018-10-buildsystem Build system

-   There's now a PPA for Ubuntu packages. See @ref building-corrade-packages-deb
    for more information.
-   The @ref corrade-rc utility is now fully standalone even with shared builds
    to minimize annoying first-time-use issues. It's also possible to build
    just this utility without anything else for example for crosscompiling, by
    enabling only `WITH_RC` and disabling all other @ref corrade-cmake "CMake"
    options.
-   Due to changes in Xcode 10, CMake before 3.12 would fail during the build
    of Corrade. To prevent that, when Xcode 10 is detected, the build aborts
    with a clear message upfront, telling the user to upgrade to CMake 3.12.
    See [mosra/corrade#52](https://github.com/mosra/corrade/issues/52) and
    [cmake/cmake#18099](https://gitlab.kitware.com/cmake/cmake/issues/18099).

@subsection corrade-changelog-2018-10-bugfixes Bug fixes

-   Calling @ref PluginManager::Manager::setPluginDirectory() could lead to
    plugin aliases being forgotten in some cases
-   Worked around a misoptimization of @ref Utility::Sha1 when using GCC 6 with
    -O3 on Raspberry Pi Model 3 B+ (AArch64) (GCC 8 works properly again). See
    [mosra/corrade#45](https://github.com/mosra/corrade/issues/45).
-   It was not possible to use the @ref Interconnect::Emitter class with
    virtual base classes on 32-bit Windows due to an incorrect assumption about
    member function pointer sizes (see
    [mosra/magnum-extras#7](https://github.com/mosra/magnum-extras/issues/7))
-   Assertions were not removed if both @ref CORRADE_NO_ASSERT and
    @ref CORRADE_GRACEFUL_ASSERT was defined

@subsection corrade-changelog-2018-10-docs Documentation

-   All code snippets are now compiled, ensuring no deprecated APIs are used
    and no accidental compile errors are present
-   @ref TestSuite::Comparator documentation mistakenly stated that it's
    possible to have multiple @cpp operator()() @ce overloads for a single
    pseudo-type. Due to implementation limitations it's not.

Changelogs for previous versions are available in @ref corrade-changelog-old.

*/

}
