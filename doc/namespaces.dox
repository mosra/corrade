/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
                2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

/** @dir Corrade
 * @brief Namespace @ref Corrade
 */
/** @namespace Corrade
@brief Root namespace

THe root namespace alone doesn't contain any functionality except for the
@ref Corrade/Corrade.h and @ref Corrade/Tags.h headers, see subnamespaces for
more information. To use the base from CMake, request the `Corrade` package and
link to the `Corrade::Corrade` target:

@code{.cmake}
find_package(Corrade REQUIRED)

# ...
target_link_libraries(your-app PRIVATE Corrade::Corrade)
@endcode

See also @ref building-corrade and @ref corrade-cmake for more information.
*/

/** @dir Corrade/Containers
 * @brief Namespace @ref Corrade::Containers, @ref Corrade::Containers::Literals
 */
/** @namespace Corrade::Containers
@brief Container implementations

Implementations for various containers which don't have direct equivalents in
STL or are better tailored to specific use cases than general standard
implementations.

This library is built if `CORRADE_WITH_UTILITY` is enabled when building
Corrade. To use this library with CMake, request the `Containers` component of
the `Corrade` package and link to the `Corrade::Containers` target:

@code{.cmake}
find_package(Corrade REQUIRED Containers)

# ...
target_link_libraries(your-app PRIVATE Corrade::Containers)
@endcode

Parts of this library are additionally available in a form of
@ref corrade-singles "single-header libraries". See also
@ref building-corrade and @ref corrade-cmake for more information.

@section Containers-mapping Mapping between Corrade and STL containers

Since the purpose of this library is to provide *alternatives* to STL
containers that aim to not repeat the same design mistakes and provide more
flexibility in certain areas, the naming and usage doesn't necessarily match
what you expect from STL. The following table shows the mapping between common
STL containers and the @ref Containers library:

Corrade type            | STL equivalent
----------------------- | -------------
@ref Array              | @ref std::vector
@ref BitArray           | @ref std::vector "std::vector<bool>"
@ref Array with custom deleters | @ref std::unique_ptr "std::unique_ptr<T[]>" (no size info)
@ref Array with @ref Utility::allocateAligned() "overaligned memory" | @ref std::valarray
@ref ArrayView          | @ref std::span @m_class{m-label m-flat m-warning} **C++20**
@ref BasicBitArrayView "BitArrayView", \n @ref BasicBitArrayView "MutableBitArrayView" | *no equivalent*
@ref EnumSet, \n @ref BigEnumSet | @ref std::bitset (no strong typing)
@ref Function<R(Args...)> "Function" | @ref std::function, \n @m_class{m-doc-external} [std::move_only_function](https://en.cppreference.com/w/cpp/utility/functional/move_only_function)
@ref Iterable, \n @ref StringIterable | *no equivalent*
@ref LinkedList         | *no equivalent*
@m_class{m-label m-flat m-danger} **not planned** | @ref std::list, \n @ref std::forward_list
@m_class{m-label m-flat m-danger} **not planned** | @ref std::map, \n @ref std::multimap, \n @ref std::set
* *no equivalent*       | @ref std::unordered_map, \n @ref std::unordered_multimap, \n @ref std::unordered_set
@ref Optional           | @ref std::optional @m_class{m-label m-flat m-primary} **C++17**
@ref Pair               | @ref std::pair
@ref Pointer            | @ref std::unique_ptr
@m_class{m-label m-flat m-danger} **not planned** | @ref std::shared_ptr, \n @ref std::weak_ptr
@ref Reference          | @ref std::reference_wrapper
@ref MoveReference, \n @ref AnyReference | *no equivalent*
@ref ScopeGuard         | *no equivalent*
@ref StaticArray        | @ref std::array
@ref StaticArrayView    | @ref std::span "std::span<T, size>" @m_class{m-label m-flat m-warning} **C++20**
@ref StridedArrayView   | @m_class{m-doc-external} [std::mdspan](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0009r10.html) @m_class{m-label m-flat m-danger} **C++23**
@ref BasicStridedBitArrayView "StridedBitArrayView" | *no equivalent*
* *no equivalent*       | @ref std::deque, \n @ref std::stack, \n @ref std::queue
@ref String             | @ref std::string, \n @ref std::u8string
@ref BasicStringView "StringView" | @ref std::string_view, \n @ref std::u8string_view @m_class{m-label m-flat m-primary} **C++17**
@ref BasicStringView "MutableStringView" | *no equivalent*
@m_class{m-label m-flat m-danger} **not planned** | @ref std::wstring, \n @ref std::u16string, \n @ref std::u32string, \n @ref std::wstring_view, \n @ref std::u16string_view, \n @ref std::u32string_view
@ref Triple             | @ref std::tuple "std::tuple<F, S, T>"
* *no equivalent*       | @ref std::any, \n @ref std::variant
*/
/** @namespace Corrade::Containers::Literals
@brief Container literals
@m_since_latest

Literals for easy construction of string views. The namespace is further split
to prevent potential ambiguity and conflicts with literals defined by other
code, but the second namespace level is @cpp inline @ce so to get the string
literals you can do either of these two:

@snippet Containers.cpp Literals-using

This library is built if `CORRADE_WITH_UTILITY` is enabled when building
Corrade. To use this library with CMake, request the `Containers` component of
the `Corrade` package and link to the `Corrade::Containers` target:

@code{.cmake}
find_package(Corrade REQUIRED Containers)

# ...
target_link_libraries(your-app PRIVATE Corrade::Containers)
@endcode

Parts of this library are additionally available in a form of
@ref corrade-singles "single-header libraries". See also
@ref building-corrade and @ref corrade-cmake for more information.
*/
/** @namespace Corrade::Containers::Literals::StringLiterals
@brief Container string literals
@m_since_latest

See the @ref Literals namespace for more information.
*/

/** @dir Corrade/Utility
 * @brief Namespace @ref Corrade::Utility, @ref Corrade::Utility::Path, @ref Corrade::Utility::String, @ref Corrade::Utility::System, @ref Corrade::Utility::Unicode
 */
/** @namespace Corrade::Utility
@brief Utilities

This library contains utility classes used by all other Corrade parts, like
debug and error output (class @ref Debug), access to configuration files (class
@ref Configuration) or compiling data files into the executable (class
@ref Resource, see also @ref resource-management "tutorial").

This library is built if `CORRADE_WITH_UTILITY` is enabled when building
Corrade. To use this library with CMake, request the `Utility` component of the
`Corrade` package and link to the `Corrade::Utility` target:

@code{.cmake}
find_package(Corrade REQUIRED Utility)

# ...
target_link_libraries(your-app PRIVATE Corrade::Utility)
@endcode

Parts of this library are additionally available in a form of
@ref corrade-singles "single-header libraries". See also @ref building-corrade
and @ref corrade-cmake for more information.
*/

/** @dir Corrade/PluginManager
 * @brief Namespace @ref Corrade::PluginManager
 */
/** @namespace Corrade::PluginManager
@brief Plugin management

This library contains @ref Manager, which takes care of loading, unloading
and instancing plugins. There is also an @ref AbstractPlugin class, which is
the base of all plugins. See @ref plugin-management for a brief introduction to
how plugins work.

This library is built if `CORRADE_WITH_PLUGINMANAGER` is enabled when building
Corrade. To use this library with CMake, request the `PluginManager` component
of the `Corrade` package and link to the `Corrade::PluginManager` target:

@code{.cmake}
find_package(Corrade REQUIRED PluginManager)

# ...
target_link_libraries(your-app PRIVATE Corrade::PluginManager)
@endcode

See also @ref building-corrade and @ref corrade-cmake for more information.
*/

/** @dir Corrade/Interconnect
 * @brief Namespace @ref Corrade::Interconnect
 */
/** @namespace Corrade::Interconnect
@brief Signal/slot connections

This library allows you to interconnect objects. See @ref interconnect for more
information.

This library is built if `CORRADE_WITH_INTERCONNECT` is enabled when building
Corrade. To use this library with CMake, request the `Interconnect` component
of the `Corrade` package and link to the `Corrade::Interconnect` target:

@code{.cmake}
find_package(Corrade REQUIRED Interconnect)

# ...
target_link_libraries(your-app PRIVATE Corrade::Interconnect)
@endcode

See also @ref building-corrade and @ref corrade-cmake for more information.
*/

/** @dir Corrade/TestSuite
 * @brief Namespace @ref Corrade::TestSuite
 */
/** @namespace Corrade::TestSuite
@brief Test suite

Testing and benchmarking framework. See @ref testsuite for more information.

This library is built if `CORRADE_WITH_TESTSUITE` is enabled when building
Corrade. To use this library with CMake, request the `TestSuite` component of
the `Corrade` package and link to the `Corrade::TestSuite` target. Most
commonly you'll be using it through the
@ref corrade-cmake-add-test "corrade_add_test()" macro as described in the
@ref testsuite "tutorial":

@code{.cmake}
find_package(Corrade REQUIRED TestSuite)

# Link a test app to the library
target_link_libraries(your-app PRIVATE Corrade::TestSuite)

# Or create a test directly from the sources
corrade_add_test(YourTest YourTest.cpp)
@endcode

See also @ref building-corrade and @ref corrade-cmake for more information.
*/

/** @dir Corrade/TestSuite/Compare
 * @brief Namespace @ref Corrade::TestSuite::Compare
 */
/** @namespace Corrade::TestSuite::Compare
@brief Various test suite comparison helpers

See @ref TestSuite-Tester-advanced-comparisons, @ref CORRADE_COMPARE_AS(),
@ref CORRADE_COMPARE_WITH() and @ref Comparator for more information.

This library is built if `CORRADE_WITH_TESTSUITE` is enabled when building
Corrade. To use this library with CMake, request the `TestSuite` component of
the `Corrade` package in CMake and link to the `Corrade::TestSuite` target:

@code{.cmake}
find_package(Corrade REQUIRED TestSuite)

# ...
target_link_libraries(your-app PRIVATE Corrade::TestSuite)
@endcode

See also @ref building-corrade and @ref corrade-cmake for more information.
*/
